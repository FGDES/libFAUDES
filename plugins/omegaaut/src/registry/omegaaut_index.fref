<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE ReferencePage SYSTEM "http://www.faudes.org/dtd/1.0/referencepage.dtd">
<ReferencePage chapter="Reference" section="OmegaAut" page="Index" title="Omega Automata PlugIn"> 

<h1>
Omega Automata PlugIn 
</h1>

<fsummary>
The omega-automata plug-in collects data structures and functions to support
supervisory control of non-termination processes.
</fsummary>

<p>
This plug-in provides data structures and functions to represent
automata that process infinite-length words. For a general overview on
the topic see <fcite name="INF1"/>. For the purpose of libFAUDES, we
restrict the scope to support for synthises of supervisiors for non-termiating processes.
</p>

<p>
Further details are organized as follows:
</p>
<ul  class="l2">
<li><p>
<a href="omegaaut_buechifnct.html">Operations on Buechi automata</a>
</p></li>
<li><p>
<a href="omegaaut_rabinfnct.html">Operations on Rabin automata</a>
</p></li>
</ul>

<p>
<br/>
<br/>
Copyright (C) 2010, 2025 Thomas Moor.
</p>

<h2>
Acceptance Conditions
</h2>

<p>
Consider a genarator <fimath>G</fimath>
and ignore that marking for now; we use the
notation
<br />
<br />
<fdmath>G\ =\ (Q,\ \Sigma,\ \delta,\ Q_o,\ \ \cdot\ )</fdmath>
<br />
<br />
with
<i>alphabet</i> <fimath>\Sigma</fimath>,
<i>state set</i> <fimath>Q</fimath>,
<i>transition relation</i> <fimath>\delta\subseteq Q\times\Sigma\times Q</fimath>, and
<i>initial states</i> <fimath>Q_o</fimath>.
Assuming that <fimath>G</fimath> is free of deadlocks it can likewise
model a non-terminating process.
Denoting <fimath>L(G)</fimath> the generated star-language, we associate with
<fimath>G</fimath> the <i>generated omega-language</i>
<br />
<br />
<fdmath>B(G)\ :=\ \{v \in \Sigma^w \ |\ \text{all prefixes } s\lt v \text{ are in } L(G)\ \}</fdmath>.
<br />
<br />
The crucial aspect from the infinite-length words perspective is the
<i>acceptance condition</i>, a technical construct that after the elapse
of all time decides whether or not a processed word <fimath>w\in B(G)</fimath>
shall be considered an element of the <i>accepted</i> omega language.
We recall two well established acceptance conditions.
</p>  


<h3>
Buechi Automata
</h3>

<p>
A Buechi automaton technically matches the plain finite automaton; i.e., has the form
<fimath>G = (Q,\ \Sigma,\ \delta,\ Q_o,\ Q_m)</fimath>
with the <i>marked states</i> <fimath>Q_m</fimath>.
With an infinite-length run  <fimath>\pi</fimath> on <fimath>G</fimath> we associate
<ul class="l2">
<li><p>  
<fimath>w\[\pi\]</fimath>
the corrosponding infinite-length word over <fimath>\Sigma</fimath>, and
</p></li>
<li><p>  
<fimath>\inf\[\pi\]</fimath> the set of states that have been visited infinitely often.
</p></li>
</ul>
</p>

<p>
An infinite-length word <fimath>v</fimath> is accepted by the Buechi automaton
<fimath>G</fimath> if there exists a correspondimg run <fimath>\pi</fimath> that visits
at least one marked state infinitely often. The accepted omega-language
associated with <fimath>G</fimath> is hence defined
<br />
<br />
<fdmath>Bm(G)\ :=\ \{
v \in \Sigma^w \ |\ 
\text{there ex. a run } \pi \text{ of } G \text{ with } v=w\[\pi\] \text{ and } \inf\[\pi\]\ \cap\ Q_m\neq\emptyset
\}
</fdmath>
</p>

<p>
For deterministic generators, 
<fimath>Bm(G)</fimath> can be expressed as the limit of <fimath>Lm(G)</fimath>:
<br />
<br />
<fdmath>Bm(G)\ =\ B(Lm(G))\ :=\ \{w \in \Sigma^v \ |\ \text{infinitely many prefixes } s\lt v \text{ are in } Lm(G)\ \}</fdmath> .
<br />
<br />
In particular, for deterministic generators <fimath>G_1</fimath> and <fimath>G_2</fimath>
with <fimath>Lm(G_1)=Lm(G_2)</fimath> we have <fimath>Bm(G_1)=Bm(G_2)</fimath>.
</p>

<h3>
Buechi Automata
</h3>
To be added in due course ....

<h2>
<a id="literature">Literature</a>
</h2>

<fliterature name="INF1">
<fauthors>W.&nbsp;Thomas</fauthors>
<ftitle>Automata on infinite objects</ftitle>
<fjournal>Handbook of Theoretical Computer</fjournal>
<fyear>1990</fyear>.
</fliterature>


</ReferencePage>


  
