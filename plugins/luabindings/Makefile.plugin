#
# Makefile for libfaudes luabindings plugin, tmoor 200807/201602/202506
#
# Included by faudes main Makefile
#
# Insert the following line in main Makefile to activate plugin;
# note that "luabindings" must come after all plugins that provide
# bindings (otherwise dependencies will not be resolved correctly)
#
# FAUDES_PLUGINS += luabindings
#
# Make targets introduced by the luabindings pluging
#
# - luabindings-prepare    unzip Lua sources
# - luabindings-configure  generate loader, run SWIG to generate wrapper code (SWIG required!)
# - luabindings-compile    compile all lua and lbp sources 
# - luabindings-clean      remove all SWG generated wrapper code
#

# Print luabinding debug messages
#FAUDES_DEBUG += lbp_debug

#
# set up paths relative to faudes path
LBP_BASE=   ./plugins/luabindings
LBP_SRCDIR= ./plugins/luabindings/src
LBP_OBJDIR= ./plugins/luabindings/obj

#
# libfaudes source files 
LBP_CPPFILES = lbp_addons.cpp lbp_function.cpp
LBP_INCLUDE  = lbp_include.h


#
# std plug-in file lists
LBP_HEADERS = $(LBP_CPPFILES:.cpp=.h) $(LBP_INCLUDE)
LBP_SOURCES = $(LBP_CPPFILES:%=$(LBP_SRCDIR)/%) 
LBP_OBJECTS = $(LBP_SOURCES:$(LBP_SRCDIR)/%.cpp=$(LBP_OBJDIR)/%$(DOT_O)) 


################################################
# lua section: extract, configure, record files
################################################

# note: as of libFAUDES 2.27a, we dont invoke the original Lua makefile
# but have a local extract --- a Lua update becomes a little more work,
# however, the cross-platform libFAUDES Makefiles are much easier to maintain.

#
# lua language: choose original source
# - as of libFAUDES 2.33i we afer transitioning to Lua 5.4.8
# - support for Lua 5.1.3 will fade out
#LBP_LUAVER = 5.1.3
LBP_LUAVER = 5.4.8

# btw:
# to create the patch, we use
# "diff -crB dir_original dir_updated > dfile.patch"

#
# lua sources 5.1.3
ifeq ($(LBP_LUAVER),5.1.3)
LBP_LUATGZ = lua-5.1.3.tar.gz
LBP_LUADIR = $(LBP_BASE)/lib/lua-5.1.3
LBP_FAUDESPATCH = lua-5.1.3-faudes.patch
LBP_LUACFILES = \
   lapi.c lcode.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c lmem.c \
   lobject.c lopcodes.c lparser.c lstate.c lstring.c ltable.c ltm.c  \
   lundump.c lvm.c lzio.c \
   lauxlib.c lbaselib.c ldblib.c liolib.c lmathlib.c loslib.c ltablib.c \
   lstrlib.c loadlib.c linit.c
endif

#
# lua sources 5.4.8
ifeq ($(LBP_LUAVER),5.4.8)
LBP_LUATGZ = lua-5.4.8.tar.gz
LBP_LUADIR = $(LBP_BASE)/lib/lua-5.4.8
LBP_LUACFILES = \
  lapi.c lcode.c lctype.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c lmem.c \
  lobject.c lopcodes.c lparser.c lstate.c lstring.c ltable.c ltm.c lundump.c lvm.c lzio.c \
  lauxlib.c lbaselib.c lcorolib.c ldblib.c liolib.c lmathlib.c loadlib.c loslib.c \
  lstrlib.c ltablib.c lutf8lib.c linit.c
endif

#
# sanity check
ifeq ($(LBP_LUATGZ),)
$(error lua sources not specified)
endif


#
# unpack lua
$(LBP_LUADIR): 
	@echo "unpacking lua sources"
	rm -rf $(LBP_LUADIR); cd $(LBP_BASE)/lib ; tar -xzf $(LBP_LUATGZ)   
ifdef LBP_FAUDESPATCH
	@echo "applying faudes patch" 
	cd $(LBP_LUADIR); patch -p1 < ../$(LBP_FAUDESPATCH)
endif	
	@echo "copy lua headers"
	- rm -rf $(INCLUDEDIR)/lua  
	mkdir -p $(INCLUDEDIR)/lua
	cp $(LBP_LUADIR)/src/*.h $(INCLUDEDIR)/lua

#
# lua object files 
LBP_LUAOBJECTS = $(LBP_LUACFILES:%.c=$(LBP_OBJDIR)/%$(DOT_O)) 

#
# create include file to open all lua modules
$(INCLUDEDIR)/lbp_load.h: $(LBP_SRCDIR)/lbp_load.h.template  
	cp -pR $< $@
	echo "// load known modules " >> $@
	echo "extern \"C\" {" >> $@
	$(ECHOE) " "$(patsubst %,extern FAUDES_API int luaopen_%\(lua_State* L\)\; \\n,$(SWGMODULES)) >> $@
	echo "}" >> $@

#
# create cpp file to open all lua modules
$(LBP_OBJDIR)/lbp_load.cpp: $(LBP_SRCDIR)/lbp_load.cpp.template  
	cp -pR $< $@
	echo "{" >> $@
	$(ECHOE) $(patsubst %,luaopen_%\(L\)\; \\n,$(SWGMODULES)) >> $@
	echo "return 0;" >> $@
	echo "}" >> $@

#
# record extra object file 
LBP_OBJECTS += $(LBP_OBJDIR)/lbp_load$(DOT_O)

#
# lua compile-time and runtime options
ifeq ($(FAUDES_PLATFORM),gcc_linux)
  LBP_LUAOPTS= -DLUA_USE_LINUX -Wno-pedantic
  LDFLAGS += -ldl -lreadline -lhistory -lncurses
  LBP_SWCFLAGS = -Wno-misleading-indentation
endif
ifeq ($(FAUDES_PLATFORM),gcc_osx)
  # using readline will make libFAUDES depend on libreadline i.e. need to get via e.g macports or brew
  #LBP_LUAOPTS = -DLUA_USE_READLINE
  #LDFLAGS += -lreadline
  LBP_LUAOPTS += -DLUA_USE_MACOSX -Wno-gnu-label-as-value -Wno-pedantic -Wno-deprecated-declarations
  LBP_SWCFLAGS = -Wno-misleading-indentation
endif
ifeq ($(FAUDES_PLATFORM),gcc_lsb)
  LDFLAGS += -ldl 
  LBP_SWCFLAGS = -Wno-misleading-indentation
endif
ifeq ($(FAUDES_PLATFORM),gcc_msys)
  LBP_LUAOPTS= -DLUA_USE_MKSTEMP -DLUA_USE_POPEN -Wno-pedantic
  #LBP_LUAOPTS+= -DLUA_USE_ISATTY # dont like this in emacs shell 
  LBP_SWCFLAGS = -Wno-misleading-indentation
endif
ifeq ($(FAUDES_PLATFORM),cl_win)
ifeq ($(SHARED),yes)
  LBP_LUAOPTS= /DLUA_BUILD_AS_DLL 
endif
  LBP_SWCFLAGS= 
endif

#
# lua runtime requirements
ifeq ($(FAUDES_PLATFORM),gcc_linux)
endif


########################################################
# swig section: generate and record interface files 
########################################################

# swig flags
#LBP_SWIGOPTIONS= -Iinclude  -I$(LBP_SRCDIR) -I$(LBP_OBJDIR) -c++ -lua -DSWIG_TYPE_TABLE=luafaudes  
LBP_SWIGOPTIONS= -I$(LBP_SRCDIR) -I$(LBP_OBJDIR) $(SWGINCLUDE) -c++ -lua -DSWIG_TYPE_TABLE=luafaudes  

#
# swig flags: adapt to 3.x.x and above
ifneq ($(findstring Version 1,$(shell $(SWIG) -version)),Version 1)
ifneq ($(findstring Version 2,$(shell $(SWIG) -version)),Version 2)
LBP_SWIGOPTIONS+= -squash-bases   
endif
endif

# c-flags for swig generated c-code
ifeq ($(SHARED),no)
ifeq ($(FAUDES_PLATFORM),cl_win)
  LBP_SWIGOPTS = /DSTATIC_LINKED
endif
endif

#
# use rti2code to generate rtiautoload.i
$(LBP_OBJDIR)/rtiautoload.i: $(INCLUDEDIR)/libfaudes.rti | $(BINDIR)/rti2code$(DOT_EXE) 
	$(call FNCT_FIXDIRSEP,./bin/rti2code$(DOT_EXE)) -swig $(call FNCT_FIXDIRSEP,$(INCLUDEDIR)/libfaudes.rti) $(call FNCT_FIXDIRSEP,$(LBP_OBJDIR)/rtiautoload)
	
#
# wrappers to be generated by swig
LBP_SWIGCPPFILES = $(patsubst %.i,$(LBP_OBJDIR)/%_luawrapper.cpp,$(notdir $(SWGINTERFACES)))
LBP_SWIGOBJECTS = $(LBP_SWIGCPPFILES:%.cpp=%$(DOT_O)) 

#
# implicit rule .i -> _luawrapper.cpp
# Note: we use VPATH here to find the .i in any plugin src/regisry dir
# Note: we miss dependencies if a plugin .i file includes others
$(LBP_OBJDIR)/%_luawrapper.cpp: registry/%.i $(LBP_OBJDIR)/rtiautoload.i
	$(SWIG) $(LBP_SWIGOPTIONS) -o $(call FNCT_FIXDIRSEP,$@) $(call FNCT_FIXDIRSEP,$<)

#
# special case for corefaudes.i: it's directly in src/swig 
$(LBP_OBJDIR)/corefaudes_luawrapper.cpp: $(SRCDIR)/swig/corefaudes.i $(LBP_OBJDIR)/rtiautoload.i
	$(SWIG) $(LBP_SWIGOPTIONS) -o $(call FNCT_FIXDIRSEP,$@) $(call FNCT_FIXDIRSEP,$<)





########################################################
# compile section: compile to object files
########################################################



# implicit rule .cpp -> .o for all std lbp-objects 
$(LBP_OBJDIR)/%$(DOT_O): $(LBP_SRCDIR)/%.cpp 
	$(CXX) -c -I$(INCLUDEDIR)/lua $(CFLAGS) $(LBP_SWCFLAGS) $(LIBOPTS) $(call FNCT_FIXDIRSEP,$<) $(COUTOPT)$(call FNCT_FIXDIRSEP,$@)

# implicit rule .c -> .o for lua sources
$(LBP_OBJDIR)/%$(DOT_O): $(LBP_LUADIR)/src/%.c 
	$(CC) -c -I$(INCLUDEDIR)/lua $(CFLAGS) $(LBP_LUAOPTS) $(call FNCT_FIXDIRSEP,$<) $(COUTOPT)$(call FNCT_FIXDIRSEP,$@)

# implicit rule .cpp -> .o for all generated cpp sources (aka swig generated and module loader)
$(LBP_OBJDIR)/%$(DOT_O): $(LBP_OBJDIR)/%.cpp 
	$(CXX) -c -I$(INCLUDEDIR)/lua $(CFLAGS) $(LBP_SWCFLAGS) $(LIBOPTS) $(LBP_SWIGOPTS) $(call FNCT_FIXDIRSEP,$<) $(COUTOPT)$(call FNCT_FIXDIRSEP,$@)








########################################################
# faudes plugin infrastructure
########################################################


#
# append my plugin to configuration
$(INCLUDEDIR)/$(LBP_INCLUDE): $(LBP_SRCDIR)/$(LBP_INCLUDE)  
	cp -pR $< $@
	echo "#include \"$(LBP_INCLUDE)\"" >> $(INCLUDEDIR)/allplugins.h
	echo "/* luabindings configuration */" >> $(INCLUDEDIR)/configuration.h
	echo "#define  FAUDES_PLUGIN_LUABINDINGS" >> $(INCLUDEDIR)/configuration.h
ifeq (lbp_debug,$(findstring lbp_debug,$(FAUDES_DEBUG)))
	echo "#define  FAUDES_DEBUG_LUABINDINGS" >> $(INCLUDEDIR)/configuration.h
endif
	echo " " >> $(INCLUDEDIR)/configuration.h



#
# test targets
luabindings-prepare: $(LBP_LUADIR) $(INCLUDEDIR)/lbp_load.h $(LBP_OBJDIR)/lbp_load.cpp
luabindings-configure: $(LBP_SWIGCPPFILES) 
luabindings-compile: $(LBP_LUAOBJECTS) 
luabindings-clean:
	rm -f $(LBP_SWIGCPPFILES)
	rm -rf $(LBP_LUADIR)
	rm -rf $(INCLUDEDIR)/lua
	rm -f $(INCLUDEDIR)/lbp_load.h
	rm -f $(LBP_OBJDIR)/lbp_load.cpp
	rm -f $(LBP_OBJDIR)/*


#
# advertise plug-in
SOURCES += $(LBP_SOURCES)
OBJECTS += $(LBP_OBJECTS) $(LBP_SWIGOBJECTS) $(LBP_LUAOBJECTS)
HEADERS += $(LBP_HEADERS) 
VPATH   += $(LBP_SRCDIR)
CLEANFILES += $(LBP_OBJECTS) $(LBP_SWIGOBJECTS) $(LBP_LUAOBJECTS)
DISTCLEANFILES += $(LBP_LUADIR) $(LBP_SWIGCPPFILES) $(LBP_OBJDIR)/lbp_load.cpp
PREPARETARGETS += luabindings-prepare
CONFIGURETARGETS += luabindings-configure






# javascript based repl (used in main makefile)
LBP_REPLDIR = $(LBP_BASE)/repl

#
# special case: emscripten
ifeq ($(FAUDES_PLATFORM),emcc_js)
# luafaudes as javascript target
$(LBP_REPLDIR)/luafaudes.js: $(LBP_REPLDIR)/luafaudes_embind.cpp $(STATIC) $(LBP_REPLDIR)/luafaudes.js_prepend $(LBP_REPLDIR)/luafaudes.js_append $(LIBFAUDES)
	$(CXX) $(CFLAGS) --bind -s INVOKE_RUN=0 --pre-js $(LBP_REPLDIR)/luafaudes.js_prepend --post-js $(LBP_REPLDIR)/luafaudes.js_append -o $@  $< $(LIBFAUDES)
# overwrite javascript target
DEFAULTTARGETS = $(LBP_REPLDIR)/luafaudes.js
endif



#
# include tutorial
include $(LBP_BASE)/Makefile.tutorial

