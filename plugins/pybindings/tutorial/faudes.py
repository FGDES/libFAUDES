# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""libFAUDES Python bindings --- see https://fgdes.tf.fau.de"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _faudes
else:
    import _faudes

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SwigModule = _faudes.SwigModule
FAUDES_VERSION = _faudes.FAUDES_VERSION
FAUDES_CONFIG_TIMESTAMP = _faudes.FAUDES_CONFIG_TIMESTAMP
FAUDES_PLUGINS = _faudes.FAUDES_PLUGINS

def Error(msg):
    return _faudes.Error(msg)

def StateNamesOn():
    return _faudes.StateNamesOn()

def StateNamesOff():
    return _faudes.StateNamesOff()

def DotExecPath(filename):
    return _faudes.DotExecPath(filename)

def Build():
    return _faudes.Build()

def Print(message):
    return _faudes.Print(message)

def Mute(on):
    return _faudes.Mute(on)

def Help(*args):
    return _faudes.Help(*args)

def TestProtocol(*args):
    return _faudes.TestProtocol(*args)


import sys  

def TEST_DUMP(m,d):
  file = "faudes_console_dump"
  if sys.argv[0] != "": 
    file = sys.argv[0]
  _faudes.TestProtocol(file)
  _faudes.TestProtocol(m + " [at " + file + "]",d)

def TEST_DIFF(): 
  res = _faudes.TestProtocol()
  file = "faudes_console_dump"
  if sys.argv[0] != "": 
    file = sys.argv[0]
  if not res:
    print("FAUDES_TEST_DIFF: sensed test case error in " + file)
  return res

import builtins

builtins.FAUDES_TEST_DUMP = TEST_DUMP
builtins.FAUDES_TEST_DIFF = TEST_DIFF


class Transition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __lt__(self, othertrans):
        return _faudes.Transition___lt__(self, othertrans)

    def __eq__(self, othertrans):
        return _faudes.Transition___eq__(self, othertrans)

    def Valid(self):
        return _faudes.Transition_Valid(self)
    X1 = property(_faudes.Transition_X1_get, _faudes.Transition_X1_set)
    Ev = property(_faudes.Transition_Ev_get, _faudes.Transition_Ev_set)
    X2 = property(_faudes.Transition_X2_get, _faudes.Transition_X2_set)

    def Str(self):
        return _faudes.Transition_Str(self)

    def __str__(self):
        return _faudes.Transition___str__(self)

    def __init__(self, *args):
        _faudes.Transition_swiginit(self, _faudes.new_Transition(*args))
    __swig_destroy__ = _faudes.delete_Transition

# Register Transition in _faudes:
_faudes.Transition_swigregister(Transition)
class Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.Type_swiginit(self, _faudes.new_Type(*args))
    __swig_destroy__ = _faudes.delete_Type

    def Assign(self, rType):
        return _faudes.Type_Assign(self, rType)

    def Copy(self):
        return _faudes.Type_Copy(self)

    def Clear(self):
        return _faudes.Type_Clear(self)

    def Write(self, *args):
        return _faudes.Type_Write(self, *args)

    def ToString(self, *args):
        return _faudes.Type_ToString(self, *args)

    def DWrite(self, *args):
        return _faudes.Type_DWrite(self, *args)

    def SWrite(self):
        return _faudes.Type_SWrite(self)

    def XWrite(self, *args):
        return _faudes.Type_XWrite(self, *args)

    def Read(self, *args):
        return _faudes.Type_Read(self, *args)

    def FromString(self, *args):
        return _faudes.Type_FromString(self, *args)

    def __str__(self):
        return _faudes.Type___str__(self)

# Register Type in _faudes:
_faudes.Type_swigregister(Type)

def TypeName(rObject):
    return _faudes.TypeName(rObject)

def TypeTest(rTypeName, rObject):
    return _faudes.TypeTest(rTypeName, rObject)
class AttributeVoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _faudes.AttributeVoid_swiginit(self, _faudes.new_AttributeVoid())
    __swig_destroy__ = _faudes.delete_AttributeVoid

    def Write(self, *args):
        return _faudes.AttributeVoid_Write(self, *args)

    def ToString(self, *args):
        return _faudes.AttributeVoid_ToString(self, *args)

    def Read(self, *args):
        return _faudes.AttributeVoid_Read(self, *args)

    def __str__(self):
        return _faudes.AttributeVoid___str__(self)

    def IsDefault(self):
        return _faudes.AttributeVoid_IsDefault(self)

    def Clear(self):
        return _faudes.AttributeVoid_Clear(self)

# Register AttributeVoid in _faudes:
_faudes.AttributeVoid_swigregister(AttributeVoid)
class AttributeFlags(AttributeVoid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _faudes.AttributeFlags_swiginit(self, _faudes.new_AttributeFlags())
    __swig_destroy__ = _faudes.delete_AttributeFlags

    def Test(self, mask):
        return _faudes.AttributeFlags_Test(self, mask)

    def TestAll(self, mask):
        return _faudes.AttributeFlags_TestAll(self, mask)

    def TestSome(self, mask):
        return _faudes.AttributeFlags_TestSome(self, mask)

    def TestNone(self, mask):
        return _faudes.AttributeFlags_TestNone(self, mask)

    def Set(self, mask):
        return _faudes.AttributeFlags_Set(self, mask)

    def Clr(self, mask):
        return _faudes.AttributeFlags_Clr(self, mask)
    mFlags = property(_faudes.AttributeFlags_mFlags_get, _faudes.AttributeFlags_mFlags_set)

# Register AttributeFlags in _faudes:
_faudes.AttributeFlags_swigregister(AttributeFlags)
class AttributeCFlags(AttributeFlags):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _faudes.AttributeCFlags_swiginit(self, _faudes.new_AttributeCFlags())
    __swig_destroy__ = _faudes.delete_AttributeCFlags

    def SetControllable(self):
        return _faudes.AttributeCFlags_SetControllable(self)

    def ClrControllable(self):
        return _faudes.AttributeCFlags_ClrControllable(self)

    def Controllable(self):
        return _faudes.AttributeCFlags_Controllable(self)

    def SetObservable(self):
        return _faudes.AttributeCFlags_SetObservable(self)

    def ClrObservable(self):
        return _faudes.AttributeCFlags_ClrObservable(self)

    def Observable(self):
        return _faudes.AttributeCFlags_Observable(self)

    def SetForcible(self):
        return _faudes.AttributeCFlags_SetForcible(self)

    def ClrForcible(self):
        return _faudes.AttributeCFlags_ClrForcible(self)

    def Forcible(self):
        return _faudes.AttributeCFlags_Forcible(self)
    mControllableFlag = _faudes.AttributeCFlags_mControllableFlag
    mObservableFlag = _faudes.AttributeCFlags_mObservableFlag
    mForcibleFlag = _faudes.AttributeCFlags_mForcibleFlag

# Register AttributeCFlags in _faudes:
_faudes.AttributeCFlags_swigregister(AttributeCFlags)
class IndexSetIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.IndexSetIterator_swiginit(self, _faudes.new_IndexSetIterator(*args))
    __swig_destroy__ = _faudes.delete_IndexSetIterator

    def DeRef(self):
        return _faudes.IndexSetIterator_DeRef(self)

    def Inc(self):
        return _faudes.IndexSetIterator_Inc(self)

    def Dec(self):
        return _faudes.IndexSetIterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.IndexSetIterator___eq__(self, rOther)

    def Index(self):
        return _faudes.IndexSetIterator_Index(self)

# Register IndexSetIterator in _faudes:
_faudes.IndexSetIterator_swigregister(IndexSetIterator)
class IndexSet(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.IndexSet_swiginit(self, _faudes.new_IndexSet(*args))

    def New(self):
        return _faudes.IndexSet_New(self)

    def Copy(self):
        return _faudes.IndexSet_Copy(self)
    __swig_destroy__ = _faudes.delete_IndexSet

    def Name(self, *args):
        return _faudes.IndexSet_Name(self, *args)

    def Clear(self):
        return _faudes.IndexSet_Clear(self)

    def Size(self):
        return _faudes.IndexSet_Size(self)

    def Empty(self):
        return _faudes.IndexSet_Empty(self)

    def Valid(self, rElem):
        return _faudes.IndexSet_Valid(self, rElem)

    def Insert(self, rElem):
        return _faudes.IndexSet_Insert(self, rElem)

    def Exists(self, rElem):
        return _faudes.IndexSet_Exists(self, rElem)

    def Begin(self):
        return _faudes.IndexSet_Begin(self)

    def End(self):
        return _faudes.IndexSet_End(self)

    def Erase(self, *args):
        return _faudes.IndexSet_Erase(self, *args)

    def Find(self, rElem):
        return _faudes.IndexSet_Find(self, rElem)

    def EraseSet(self, rOtherSet):
        return _faudes.IndexSet_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.IndexSet_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.IndexSet_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.IndexSet___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.IndexSet___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.IndexSet___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.IndexSet___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.IndexSet___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.IndexSet___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.IndexSet_Detach(self)

    def Lock(self):
        return _faudes.IndexSet_Lock(self)

# Register IndexSet in _faudes:
_faudes.IndexSet_swigregister(IndexSet)
class IndexSetA(IndexSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def New(self):
        return _faudes.IndexSetA_New(self)

    def Copy(self):
        return _faudes.IndexSetA_Copy(self)
    __swig_destroy__ = _faudes.delete_IndexSetA

    def __init__(self, *args):
        _faudes.IndexSetA_swiginit(self, _faudes.new_IndexSetA(*args))

# Register IndexSetA in _faudes:
_faudes.IndexSetA_swigregister(IndexSetA)
class NameSetIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.NameSetIterator_swiginit(self, _faudes.new_NameSetIterator(*args))
    __swig_destroy__ = _faudes.delete_NameSetIterator

    def DeRef(self):
        return _faudes.NameSetIterator_DeRef(self)

    def Inc(self):
        return _faudes.NameSetIterator_Inc(self)

    def Dec(self):
        return _faudes.NameSetIterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.NameSetIterator___eq__(self, rOther)

    def Index(self):
        return _faudes.NameSetIterator_Index(self)

    def Name(self):
        return _faudes.NameSetIterator_Name(self)

# Register NameSetIterator in _faudes:
_faudes.NameSetIterator_swigregister(NameSetIterator)
class EventSet(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.EventSet_swiginit(self, _faudes.new_EventSet(*args))

    def New(self):
        return _faudes.EventSet_New(self)

    def Copy(self):
        return _faudes.EventSet_Copy(self)
    __swig_destroy__ = _faudes.delete_EventSet

    def Name(self, *args):
        return _faudes.EventSet_Name(self, *args)

    def Clear(self):
        return _faudes.EventSet_Clear(self)

    def Size(self):
        return _faudes.EventSet_Size(self)

    def Empty(self):
        return _faudes.EventSet_Empty(self)

    def Valid(self, rElem):
        return _faudes.EventSet_Valid(self, rElem)

    def Begin(self):
        return _faudes.EventSet_Begin(self)

    def End(self):
        return _faudes.EventSet_End(self)

    def EraseSet(self, rOtherSet):
        return _faudes.EventSet_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.EventSet_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.EventSet_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.EventSet___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.EventSet___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.EventSet___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.EventSet___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.EventSet___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.EventSet___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.EventSet_Detach(self)

    def Lock(self):
        return _faudes.EventSet_Lock(self)

    def Index(self, rName):
        return _faudes.EventSet_Index(self, rName)

    def Insert(self, *args):
        return _faudes.EventSet_Insert(self, *args)

    def Erase(self, *args):
        return _faudes.EventSet_Erase(self, *args)

    def Exists(self, *args):
        return _faudes.EventSet_Exists(self, *args)

    def Find(self, *args):
        return _faudes.EventSet_Find(self, *args)

    def SymbolicName(self, *args):
        return _faudes.EventSet_SymbolicName(self, *args)

    def Str(self, *args):
        return _faudes.EventSet_Str(self, *args)

# Register EventSet in _faudes:
_faudes.EventSet_swigregister(EventSet)
class Alphabet(EventSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def New(self):
        return _faudes.Alphabet_New(self)

    def Copy(self):
        return _faudes.Alphabet_Copy(self)
    __swig_destroy__ = _faudes.delete_Alphabet

    def __init__(self, *args):
        _faudes.Alphabet_swiginit(self, _faudes.new_Alphabet(*args))

    def Insert(self, *args):
        return _faudes.Alphabet_Insert(self, *args)

    def Attribute(self, *args):
        return _faudes.Alphabet_Attribute(self, *args)

# Register Alphabet in _faudes:
_faudes.Alphabet_swigregister(Alphabet)
class TransSetIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetIterator_swiginit(self, _faudes.new_TransSetIterator(*args))
    __swig_destroy__ = _faudes.delete_TransSetIterator

    def DeRef(self):
        return _faudes.TransSetIterator_DeRef(self)

    def Inc(self):
        return _faudes.TransSetIterator_Inc(self)

    def Dec(self):
        return _faudes.TransSetIterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.TransSetIterator___eq__(self, rOther)

    def Transition(self):
        return _faudes.TransSetIterator_Transition(self)

    def X1(self):
        return _faudes.TransSetIterator_X1(self)

    def Ev(self):
        return _faudes.TransSetIterator_Ev(self)

    def X2(self):
        return _faudes.TransSetIterator_X2(self)

# Register TransSetIterator in _faudes:
_faudes.TransSetIterator_swigregister(TransSetIterator)
class TransSetX1X2EvIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetX1X2EvIterator_swiginit(self, _faudes.new_TransSetX1X2EvIterator(*args))
    __swig_destroy__ = _faudes.delete_TransSetX1X2EvIterator

    def DeRef(self):
        return _faudes.TransSetX1X2EvIterator_DeRef(self)

    def Inc(self):
        return _faudes.TransSetX1X2EvIterator_Inc(self)

    def Dec(self):
        return _faudes.TransSetX1X2EvIterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.TransSetX1X2EvIterator___eq__(self, rOther)

    def Transition(self):
        return _faudes.TransSetX1X2EvIterator_Transition(self)

    def X1(self):
        return _faudes.TransSetX1X2EvIterator_X1(self)

    def Ev(self):
        return _faudes.TransSetX1X2EvIterator_Ev(self)

    def X2(self):
        return _faudes.TransSetX1X2EvIterator_X2(self)

# Register TransSetX1X2EvIterator in _faudes:
_faudes.TransSetX1X2EvIterator_swigregister(TransSetX1X2EvIterator)
class TransSetX2EvX1Iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetX2EvX1Iterator_swiginit(self, _faudes.new_TransSetX2EvX1Iterator(*args))
    __swig_destroy__ = _faudes.delete_TransSetX2EvX1Iterator

    def DeRef(self):
        return _faudes.TransSetX2EvX1Iterator_DeRef(self)

    def Inc(self):
        return _faudes.TransSetX2EvX1Iterator_Inc(self)

    def Dec(self):
        return _faudes.TransSetX2EvX1Iterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.TransSetX2EvX1Iterator___eq__(self, rOther)

    def Transition(self):
        return _faudes.TransSetX2EvX1Iterator_Transition(self)

    def X1(self):
        return _faudes.TransSetX2EvX1Iterator_X1(self)

    def Ev(self):
        return _faudes.TransSetX2EvX1Iterator_Ev(self)

    def X2(self):
        return _faudes.TransSetX2EvX1Iterator_X2(self)

# Register TransSetX2EvX1Iterator in _faudes:
_faudes.TransSetX2EvX1Iterator_swigregister(TransSetX2EvX1Iterator)
class TransSetX2X1EvIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetX2X1EvIterator_swiginit(self, _faudes.new_TransSetX2X1EvIterator(*args))
    __swig_destroy__ = _faudes.delete_TransSetX2X1EvIterator

    def DeRef(self):
        return _faudes.TransSetX2X1EvIterator_DeRef(self)

    def Inc(self):
        return _faudes.TransSetX2X1EvIterator_Inc(self)

    def Dec(self):
        return _faudes.TransSetX2X1EvIterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.TransSetX2X1EvIterator___eq__(self, rOther)

    def Transition(self):
        return _faudes.TransSetX2X1EvIterator_Transition(self)

    def X1(self):
        return _faudes.TransSetX2X1EvIterator_X1(self)

    def Ev(self):
        return _faudes.TransSetX2X1EvIterator_Ev(self)

    def X2(self):
        return _faudes.TransSetX2X1EvIterator_X2(self)

# Register TransSetX2X1EvIterator in _faudes:
_faudes.TransSetX2X1EvIterator_swigregister(TransSetX2X1EvIterator)
class TransSetEvX1X2Iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetEvX1X2Iterator_swiginit(self, _faudes.new_TransSetEvX1X2Iterator(*args))
    __swig_destroy__ = _faudes.delete_TransSetEvX1X2Iterator

    def DeRef(self):
        return _faudes.TransSetEvX1X2Iterator_DeRef(self)

    def Inc(self):
        return _faudes.TransSetEvX1X2Iterator_Inc(self)

    def Dec(self):
        return _faudes.TransSetEvX1X2Iterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.TransSetEvX1X2Iterator___eq__(self, rOther)

    def Transition(self):
        return _faudes.TransSetEvX1X2Iterator_Transition(self)

    def X1(self):
        return _faudes.TransSetEvX1X2Iterator_X1(self)

    def Ev(self):
        return _faudes.TransSetEvX1X2Iterator_Ev(self)

    def X2(self):
        return _faudes.TransSetEvX1X2Iterator_X2(self)

# Register TransSetEvX1X2Iterator in _faudes:
_faudes.TransSetEvX1X2Iterator_swigregister(TransSetEvX1X2Iterator)
class TransSetEvX2X1Iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetEvX2X1Iterator_swiginit(self, _faudes.new_TransSetEvX2X1Iterator(*args))
    __swig_destroy__ = _faudes.delete_TransSetEvX2X1Iterator

    def DeRef(self):
        return _faudes.TransSetEvX2X1Iterator_DeRef(self)

    def Inc(self):
        return _faudes.TransSetEvX2X1Iterator_Inc(self)

    def Dec(self):
        return _faudes.TransSetEvX2X1Iterator_Dec(self)

    def __eq__(self, rOther):
        return _faudes.TransSetEvX2X1Iterator___eq__(self, rOther)

    def Transition(self):
        return _faudes.TransSetEvX2X1Iterator_Transition(self)

    def X1(self):
        return _faudes.TransSetEvX2X1Iterator_X1(self)

    def Ev(self):
        return _faudes.TransSetEvX2X1Iterator_Ev(self)

    def X2(self):
        return _faudes.TransSetEvX2X1Iterator_X2(self)

# Register TransSetEvX2X1Iterator in _faudes:
_faudes.TransSetEvX2X1Iterator_swigregister(TransSetEvX2X1Iterator)
class TransSet(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSet_swiginit(self, _faudes.new_TransSet(*args))
    __swig_destroy__ = _faudes.delete_TransSet

    def New(self):
        return _faudes.TransSet_New(self)

    def Copy(self):
        return _faudes.TransSet_Copy(self)

    def Name(self, *args):
        return _faudes.TransSet_Name(self, *args)

    def Clear(self):
        return _faudes.TransSet_Clear(self)

    def Size(self):
        return _faudes.TransSet_Size(self)

    def Empty(self):
        return _faudes.TransSet_Empty(self)

    def Valid(self, rElem):
        return _faudes.TransSet_Valid(self, rElem)

    def EraseSet(self, rOtherSet):
        return _faudes.TransSet_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.TransSet_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.TransSet_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.TransSet___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.TransSet___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.TransSet___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.TransSet___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.TransSet___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.TransSet___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.TransSet_Detach(self)

    def Lock(self):
        return _faudes.TransSet_Lock(self)

    def EraseByX1(self, x1):
        return _faudes.TransSet_EraseByX1(self, x1)

    def EraseByX1Ev(self, x1, ev):
        return _faudes.TransSet_EraseByX1Ev(self, x1, ev)

    def EraseByX2(self, x2):
        return _faudes.TransSet_EraseByX2(self, x2)

    def EraseByX1OrX2(self, x):
        return _faudes.TransSet_EraseByX1OrX2(self, x)

    def RestrictStates(self, states):
        return _faudes.TransSet_RestrictStates(self, states)

    def ExistsByX1OrX2(self, x):
        return _faudes.TransSet_ExistsByX1OrX2(self, x)

    def ExistsByX1Ev(self, x1, ev):
        return _faudes.TransSet_ExistsByX1Ev(self, x1, ev)

    def ExistsByX1(self, x1):
        return _faudes.TransSet_ExistsByX1(self, x1)

    def Insert(self, *args):
        return _faudes.TransSet_Insert(self, *args)

    def Erase(self, *args):
        return _faudes.TransSet_Erase(self, *args)

    def EraseByEv(self, *args):
        return _faudes.TransSet_EraseByEv(self, *args)

    def Exists(self, *args):
        return _faudes.TransSet_Exists(self, *args)

    def Find(self, *args):
        return _faudes.TransSet_Find(self, *args)

    def Begin(self, *args):
        return _faudes.TransSet_Begin(self, *args)

    def End(self, *args):
        return _faudes.TransSet_End(self, *args)

    def BeginByEv(self, ev):
        return _faudes.TransSet_BeginByEv(self, ev)

    def EndByEv(self, ev):
        return _faudes.TransSet_EndByEv(self, ev)

    def BeginByEvX1(self, ev, x1):
        return _faudes.TransSet_BeginByEvX1(self, ev, x1)

    def EndByEvX1(self, ev, x1):
        return _faudes.TransSet_EndByEvX1(self, ev, x1)

    def BeginByEvX2(self, ev, x2):
        return _faudes.TransSet_BeginByEvX2(self, ev, x2)

    def EndByEvX2(self, ev, x2):
        return _faudes.TransSet_EndByEvX2(self, ev, x2)

    def BeginByX2(self, x2):
        return _faudes.TransSet_BeginByX2(self, x2)

    def EndByX2(self, x2):
        return _faudes.TransSet_EndByX2(self, x2)

    def BeginByX2Ev(self, x2, ev):
        return _faudes.TransSet_BeginByX2Ev(self, x2, ev)

    def EndByX2Ev(self, x2, ev):
        return _faudes.TransSet_EndByX2Ev(self, x2, ev)

    def ReSort(self, *args):
        return _faudes.TransSet_ReSort(self, *args)

    def States(self):
        return _faudes.TransSet_States(self)

    def SuccessorStates(self, *args):
        return _faudes.TransSet_SuccessorStates(self, *args)

    def ActiveEvents(self, x1, pSymTab=None):
        return _faudes.TransSet_ActiveEvents(self, x1, pSymTab)

    def Str(self, *args):
        return _faudes.TransSet_Str(self, *args)

# Register TransSet in _faudes:
_faudes.TransSet_swigregister(TransSet)
class TransSetX1X2Ev(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetX1X2Ev_swiginit(self, _faudes.new_TransSetX1X2Ev(*args))
    __swig_destroy__ = _faudes.delete_TransSetX1X2Ev

    def New(self):
        return _faudes.TransSetX1X2Ev_New(self)

    def Copy(self):
        return _faudes.TransSetX1X2Ev_Copy(self)

    def Name(self, *args):
        return _faudes.TransSetX1X2Ev_Name(self, *args)

    def Clear(self):
        return _faudes.TransSetX1X2Ev_Clear(self)

    def Size(self):
        return _faudes.TransSetX1X2Ev_Size(self)

    def Empty(self):
        return _faudes.TransSetX1X2Ev_Empty(self)

    def Valid(self, rElem):
        return _faudes.TransSetX1X2Ev_Valid(self, rElem)

    def EraseSet(self, rOtherSet):
        return _faudes.TransSetX1X2Ev_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.TransSetX1X2Ev_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.TransSetX1X2Ev_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.TransSetX1X2Ev___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.TransSetX1X2Ev___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.TransSetX1X2Ev___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.TransSetX1X2Ev___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.TransSetX1X2Ev___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.TransSetX1X2Ev___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.TransSetX1X2Ev_Detach(self)

    def Lock(self):
        return _faudes.TransSetX1X2Ev_Lock(self)

    def EraseByX1(self, x1):
        return _faudes.TransSetX1X2Ev_EraseByX1(self, x1)

    def EraseByX1Ev(self, x1, ev):
        return _faudes.TransSetX1X2Ev_EraseByX1Ev(self, x1, ev)

    def EraseByX2(self, x2):
        return _faudes.TransSetX1X2Ev_EraseByX2(self, x2)

    def EraseByX1OrX2(self, x):
        return _faudes.TransSetX1X2Ev_EraseByX1OrX2(self, x)

    def RestrictStates(self, states):
        return _faudes.TransSetX1X2Ev_RestrictStates(self, states)

    def ExistsByX1OrX2(self, x):
        return _faudes.TransSetX1X2Ev_ExistsByX1OrX2(self, x)

    def ExistsByX1Ev(self, x1, ev):
        return _faudes.TransSetX1X2Ev_ExistsByX1Ev(self, x1, ev)

    def ExistsByX1(self, x1):
        return _faudes.TransSetX1X2Ev_ExistsByX1(self, x1)

    def Insert(self, *args):
        return _faudes.TransSetX1X2Ev_Insert(self, *args)

    def Erase(self, *args):
        return _faudes.TransSetX1X2Ev_Erase(self, *args)

    def EraseByEv(self, *args):
        return _faudes.TransSetX1X2Ev_EraseByEv(self, *args)

    def Exists(self, *args):
        return _faudes.TransSetX1X2Ev_Exists(self, *args)

    def Find(self, *args):
        return _faudes.TransSetX1X2Ev_Find(self, *args)

    def Begin(self, *args):
        return _faudes.TransSetX1X2Ev_Begin(self, *args)

    def End(self, *args):
        return _faudes.TransSetX1X2Ev_End(self, *args)

    def BeginByEv(self, ev):
        return _faudes.TransSetX1X2Ev_BeginByEv(self, ev)

    def EndByEv(self, ev):
        return _faudes.TransSetX1X2Ev_EndByEv(self, ev)

    def BeginByEvX1(self, ev, x1):
        return _faudes.TransSetX1X2Ev_BeginByEvX1(self, ev, x1)

    def EndByEvX1(self, ev, x1):
        return _faudes.TransSetX1X2Ev_EndByEvX1(self, ev, x1)

    def BeginByEvX2(self, ev, x2):
        return _faudes.TransSetX1X2Ev_BeginByEvX2(self, ev, x2)

    def EndByEvX2(self, ev, x2):
        return _faudes.TransSetX1X2Ev_EndByEvX2(self, ev, x2)

    def BeginByX2(self, x2):
        return _faudes.TransSetX1X2Ev_BeginByX2(self, x2)

    def EndByX2(self, x2):
        return _faudes.TransSetX1X2Ev_EndByX2(self, x2)

    def BeginByX2Ev(self, x2, ev):
        return _faudes.TransSetX1X2Ev_BeginByX2Ev(self, x2, ev)

    def EndByX2Ev(self, x2, ev):
        return _faudes.TransSetX1X2Ev_EndByX2Ev(self, x2, ev)

    def ReSort(self, *args):
        return _faudes.TransSetX1X2Ev_ReSort(self, *args)

    def States(self):
        return _faudes.TransSetX1X2Ev_States(self)

    def SuccessorStates(self, *args):
        return _faudes.TransSetX1X2Ev_SuccessorStates(self, *args)

    def ActiveEvents(self, x1, pSymTab=None):
        return _faudes.TransSetX1X2Ev_ActiveEvents(self, x1, pSymTab)

    def Str(self, *args):
        return _faudes.TransSetX1X2Ev_Str(self, *args)

# Register TransSetX1X2Ev in _faudes:
_faudes.TransSetX1X2Ev_swigregister(TransSetX1X2Ev)
class TransSetX2EvX1(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetX2EvX1_swiginit(self, _faudes.new_TransSetX2EvX1(*args))
    __swig_destroy__ = _faudes.delete_TransSetX2EvX1

    def New(self):
        return _faudes.TransSetX2EvX1_New(self)

    def Copy(self):
        return _faudes.TransSetX2EvX1_Copy(self)

    def Name(self, *args):
        return _faudes.TransSetX2EvX1_Name(self, *args)

    def Clear(self):
        return _faudes.TransSetX2EvX1_Clear(self)

    def Size(self):
        return _faudes.TransSetX2EvX1_Size(self)

    def Empty(self):
        return _faudes.TransSetX2EvX1_Empty(self)

    def Valid(self, rElem):
        return _faudes.TransSetX2EvX1_Valid(self, rElem)

    def EraseSet(self, rOtherSet):
        return _faudes.TransSetX2EvX1_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.TransSetX2EvX1_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.TransSetX2EvX1_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.TransSetX2EvX1___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.TransSetX2EvX1___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.TransSetX2EvX1___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.TransSetX2EvX1___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.TransSetX2EvX1___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.TransSetX2EvX1___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.TransSetX2EvX1_Detach(self)

    def Lock(self):
        return _faudes.TransSetX2EvX1_Lock(self)

    def EraseByX1(self, x1):
        return _faudes.TransSetX2EvX1_EraseByX1(self, x1)

    def EraseByX1Ev(self, x1, ev):
        return _faudes.TransSetX2EvX1_EraseByX1Ev(self, x1, ev)

    def EraseByX2(self, x2):
        return _faudes.TransSetX2EvX1_EraseByX2(self, x2)

    def EraseByX1OrX2(self, x):
        return _faudes.TransSetX2EvX1_EraseByX1OrX2(self, x)

    def RestrictStates(self, states):
        return _faudes.TransSetX2EvX1_RestrictStates(self, states)

    def ExistsByX1OrX2(self, x):
        return _faudes.TransSetX2EvX1_ExistsByX1OrX2(self, x)

    def ExistsByX1Ev(self, x1, ev):
        return _faudes.TransSetX2EvX1_ExistsByX1Ev(self, x1, ev)

    def ExistsByX1(self, x1):
        return _faudes.TransSetX2EvX1_ExistsByX1(self, x1)

    def Insert(self, *args):
        return _faudes.TransSetX2EvX1_Insert(self, *args)

    def Erase(self, *args):
        return _faudes.TransSetX2EvX1_Erase(self, *args)

    def EraseByEv(self, *args):
        return _faudes.TransSetX2EvX1_EraseByEv(self, *args)

    def Exists(self, *args):
        return _faudes.TransSetX2EvX1_Exists(self, *args)

    def Find(self, *args):
        return _faudes.TransSetX2EvX1_Find(self, *args)

    def Begin(self, *args):
        return _faudes.TransSetX2EvX1_Begin(self, *args)

    def End(self, *args):
        return _faudes.TransSetX2EvX1_End(self, *args)

    def BeginByEv(self, ev):
        return _faudes.TransSetX2EvX1_BeginByEv(self, ev)

    def EndByEv(self, ev):
        return _faudes.TransSetX2EvX1_EndByEv(self, ev)

    def BeginByEvX1(self, ev, x1):
        return _faudes.TransSetX2EvX1_BeginByEvX1(self, ev, x1)

    def EndByEvX1(self, ev, x1):
        return _faudes.TransSetX2EvX1_EndByEvX1(self, ev, x1)

    def BeginByEvX2(self, ev, x2):
        return _faudes.TransSetX2EvX1_BeginByEvX2(self, ev, x2)

    def EndByEvX2(self, ev, x2):
        return _faudes.TransSetX2EvX1_EndByEvX2(self, ev, x2)

    def BeginByX2(self, x2):
        return _faudes.TransSetX2EvX1_BeginByX2(self, x2)

    def EndByX2(self, x2):
        return _faudes.TransSetX2EvX1_EndByX2(self, x2)

    def BeginByX2Ev(self, x2, ev):
        return _faudes.TransSetX2EvX1_BeginByX2Ev(self, x2, ev)

    def EndByX2Ev(self, x2, ev):
        return _faudes.TransSetX2EvX1_EndByX2Ev(self, x2, ev)

    def ReSort(self, *args):
        return _faudes.TransSetX2EvX1_ReSort(self, *args)

    def States(self):
        return _faudes.TransSetX2EvX1_States(self)

    def SuccessorStates(self, *args):
        return _faudes.TransSetX2EvX1_SuccessorStates(self, *args)

    def ActiveEvents(self, x1, pSymTab=None):
        return _faudes.TransSetX2EvX1_ActiveEvents(self, x1, pSymTab)

    def Str(self, *args):
        return _faudes.TransSetX2EvX1_Str(self, *args)

# Register TransSetX2EvX1 in _faudes:
_faudes.TransSetX2EvX1_swigregister(TransSetX2EvX1)
class TransSetX2X1Ev(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetX2X1Ev_swiginit(self, _faudes.new_TransSetX2X1Ev(*args))
    __swig_destroy__ = _faudes.delete_TransSetX2X1Ev

    def New(self):
        return _faudes.TransSetX2X1Ev_New(self)

    def Copy(self):
        return _faudes.TransSetX2X1Ev_Copy(self)

    def Name(self, *args):
        return _faudes.TransSetX2X1Ev_Name(self, *args)

    def Clear(self):
        return _faudes.TransSetX2X1Ev_Clear(self)

    def Size(self):
        return _faudes.TransSetX2X1Ev_Size(self)

    def Empty(self):
        return _faudes.TransSetX2X1Ev_Empty(self)

    def Valid(self, rElem):
        return _faudes.TransSetX2X1Ev_Valid(self, rElem)

    def EraseSet(self, rOtherSet):
        return _faudes.TransSetX2X1Ev_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.TransSetX2X1Ev_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.TransSetX2X1Ev_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.TransSetX2X1Ev___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.TransSetX2X1Ev___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.TransSetX2X1Ev___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.TransSetX2X1Ev___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.TransSetX2X1Ev___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.TransSetX2X1Ev___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.TransSetX2X1Ev_Detach(self)

    def Lock(self):
        return _faudes.TransSetX2X1Ev_Lock(self)

    def EraseByX1(self, x1):
        return _faudes.TransSetX2X1Ev_EraseByX1(self, x1)

    def EraseByX1Ev(self, x1, ev):
        return _faudes.TransSetX2X1Ev_EraseByX1Ev(self, x1, ev)

    def EraseByX2(self, x2):
        return _faudes.TransSetX2X1Ev_EraseByX2(self, x2)

    def EraseByX1OrX2(self, x):
        return _faudes.TransSetX2X1Ev_EraseByX1OrX2(self, x)

    def RestrictStates(self, states):
        return _faudes.TransSetX2X1Ev_RestrictStates(self, states)

    def ExistsByX1OrX2(self, x):
        return _faudes.TransSetX2X1Ev_ExistsByX1OrX2(self, x)

    def ExistsByX1Ev(self, x1, ev):
        return _faudes.TransSetX2X1Ev_ExistsByX1Ev(self, x1, ev)

    def ExistsByX1(self, x1):
        return _faudes.TransSetX2X1Ev_ExistsByX1(self, x1)

    def Insert(self, *args):
        return _faudes.TransSetX2X1Ev_Insert(self, *args)

    def Erase(self, *args):
        return _faudes.TransSetX2X1Ev_Erase(self, *args)

    def EraseByEv(self, *args):
        return _faudes.TransSetX2X1Ev_EraseByEv(self, *args)

    def Exists(self, *args):
        return _faudes.TransSetX2X1Ev_Exists(self, *args)

    def Find(self, *args):
        return _faudes.TransSetX2X1Ev_Find(self, *args)

    def Begin(self, *args):
        return _faudes.TransSetX2X1Ev_Begin(self, *args)

    def End(self, *args):
        return _faudes.TransSetX2X1Ev_End(self, *args)

    def BeginByEv(self, ev):
        return _faudes.TransSetX2X1Ev_BeginByEv(self, ev)

    def EndByEv(self, ev):
        return _faudes.TransSetX2X1Ev_EndByEv(self, ev)

    def BeginByEvX1(self, ev, x1):
        return _faudes.TransSetX2X1Ev_BeginByEvX1(self, ev, x1)

    def EndByEvX1(self, ev, x1):
        return _faudes.TransSetX2X1Ev_EndByEvX1(self, ev, x1)

    def BeginByEvX2(self, ev, x2):
        return _faudes.TransSetX2X1Ev_BeginByEvX2(self, ev, x2)

    def EndByEvX2(self, ev, x2):
        return _faudes.TransSetX2X1Ev_EndByEvX2(self, ev, x2)

    def BeginByX2(self, x2):
        return _faudes.TransSetX2X1Ev_BeginByX2(self, x2)

    def EndByX2(self, x2):
        return _faudes.TransSetX2X1Ev_EndByX2(self, x2)

    def BeginByX2Ev(self, x2, ev):
        return _faudes.TransSetX2X1Ev_BeginByX2Ev(self, x2, ev)

    def EndByX2Ev(self, x2, ev):
        return _faudes.TransSetX2X1Ev_EndByX2Ev(self, x2, ev)

    def ReSort(self, *args):
        return _faudes.TransSetX2X1Ev_ReSort(self, *args)

    def States(self):
        return _faudes.TransSetX2X1Ev_States(self)

    def SuccessorStates(self, *args):
        return _faudes.TransSetX2X1Ev_SuccessorStates(self, *args)

    def ActiveEvents(self, x1, pSymTab=None):
        return _faudes.TransSetX2X1Ev_ActiveEvents(self, x1, pSymTab)

    def Str(self, *args):
        return _faudes.TransSetX2X1Ev_Str(self, *args)

# Register TransSetX2X1Ev in _faudes:
_faudes.TransSetX2X1Ev_swigregister(TransSetX2X1Ev)
class TransSetEvX1X2(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetEvX1X2_swiginit(self, _faudes.new_TransSetEvX1X2(*args))
    __swig_destroy__ = _faudes.delete_TransSetEvX1X2

    def New(self):
        return _faudes.TransSetEvX1X2_New(self)

    def Copy(self):
        return _faudes.TransSetEvX1X2_Copy(self)

    def Name(self, *args):
        return _faudes.TransSetEvX1X2_Name(self, *args)

    def Clear(self):
        return _faudes.TransSetEvX1X2_Clear(self)

    def Size(self):
        return _faudes.TransSetEvX1X2_Size(self)

    def Empty(self):
        return _faudes.TransSetEvX1X2_Empty(self)

    def Valid(self, rElem):
        return _faudes.TransSetEvX1X2_Valid(self, rElem)

    def EraseSet(self, rOtherSet):
        return _faudes.TransSetEvX1X2_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.TransSetEvX1X2_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.TransSetEvX1X2_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.TransSetEvX1X2___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.TransSetEvX1X2___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.TransSetEvX1X2___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.TransSetEvX1X2___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.TransSetEvX1X2___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.TransSetEvX1X2___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.TransSetEvX1X2_Detach(self)

    def Lock(self):
        return _faudes.TransSetEvX1X2_Lock(self)

    def EraseByX1(self, x1):
        return _faudes.TransSetEvX1X2_EraseByX1(self, x1)

    def EraseByX1Ev(self, x1, ev):
        return _faudes.TransSetEvX1X2_EraseByX1Ev(self, x1, ev)

    def EraseByX2(self, x2):
        return _faudes.TransSetEvX1X2_EraseByX2(self, x2)

    def EraseByX1OrX2(self, x):
        return _faudes.TransSetEvX1X2_EraseByX1OrX2(self, x)

    def RestrictStates(self, states):
        return _faudes.TransSetEvX1X2_RestrictStates(self, states)

    def ExistsByX1OrX2(self, x):
        return _faudes.TransSetEvX1X2_ExistsByX1OrX2(self, x)

    def ExistsByX1Ev(self, x1, ev):
        return _faudes.TransSetEvX1X2_ExistsByX1Ev(self, x1, ev)

    def ExistsByX1(self, x1):
        return _faudes.TransSetEvX1X2_ExistsByX1(self, x1)

    def Insert(self, *args):
        return _faudes.TransSetEvX1X2_Insert(self, *args)

    def Erase(self, *args):
        return _faudes.TransSetEvX1X2_Erase(self, *args)

    def EraseByEv(self, *args):
        return _faudes.TransSetEvX1X2_EraseByEv(self, *args)

    def Exists(self, *args):
        return _faudes.TransSetEvX1X2_Exists(self, *args)

    def Find(self, *args):
        return _faudes.TransSetEvX1X2_Find(self, *args)

    def Begin(self, *args):
        return _faudes.TransSetEvX1X2_Begin(self, *args)

    def End(self, *args):
        return _faudes.TransSetEvX1X2_End(self, *args)

    def BeginByEv(self, ev):
        return _faudes.TransSetEvX1X2_BeginByEv(self, ev)

    def EndByEv(self, ev):
        return _faudes.TransSetEvX1X2_EndByEv(self, ev)

    def BeginByEvX1(self, ev, x1):
        return _faudes.TransSetEvX1X2_BeginByEvX1(self, ev, x1)

    def EndByEvX1(self, ev, x1):
        return _faudes.TransSetEvX1X2_EndByEvX1(self, ev, x1)

    def BeginByEvX2(self, ev, x2):
        return _faudes.TransSetEvX1X2_BeginByEvX2(self, ev, x2)

    def EndByEvX2(self, ev, x2):
        return _faudes.TransSetEvX1X2_EndByEvX2(self, ev, x2)

    def BeginByX2(self, x2):
        return _faudes.TransSetEvX1X2_BeginByX2(self, x2)

    def EndByX2(self, x2):
        return _faudes.TransSetEvX1X2_EndByX2(self, x2)

    def BeginByX2Ev(self, x2, ev):
        return _faudes.TransSetEvX1X2_BeginByX2Ev(self, x2, ev)

    def EndByX2Ev(self, x2, ev):
        return _faudes.TransSetEvX1X2_EndByX2Ev(self, x2, ev)

    def ReSort(self, *args):
        return _faudes.TransSetEvX1X2_ReSort(self, *args)

    def States(self):
        return _faudes.TransSetEvX1X2_States(self)

    def SuccessorStates(self, *args):
        return _faudes.TransSetEvX1X2_SuccessorStates(self, *args)

    def ActiveEvents(self, x1, pSymTab=None):
        return _faudes.TransSetEvX1X2_ActiveEvents(self, x1, pSymTab)

    def Str(self, *args):
        return _faudes.TransSetEvX1X2_Str(self, *args)

# Register TransSetEvX1X2 in _faudes:
_faudes.TransSetEvX1X2_swigregister(TransSetEvX1X2)
class TransSetEvX2X1(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.TransSetEvX2X1_swiginit(self, _faudes.new_TransSetEvX2X1(*args))
    __swig_destroy__ = _faudes.delete_TransSetEvX2X1

    def New(self):
        return _faudes.TransSetEvX2X1_New(self)

    def Copy(self):
        return _faudes.TransSetEvX2X1_Copy(self)

    def Name(self, *args):
        return _faudes.TransSetEvX2X1_Name(self, *args)

    def Clear(self):
        return _faudes.TransSetEvX2X1_Clear(self)

    def Size(self):
        return _faudes.TransSetEvX2X1_Size(self)

    def Empty(self):
        return _faudes.TransSetEvX2X1_Empty(self)

    def Valid(self, rElem):
        return _faudes.TransSetEvX2X1_Valid(self, rElem)

    def EraseSet(self, rOtherSet):
        return _faudes.TransSetEvX2X1_EraseSet(self, rOtherSet)

    def InsertSet(self, rOtherSet):
        return _faudes.TransSetEvX2X1_InsertSet(self, rOtherSet)

    def RestrictSet(self, rOtherSet):
        return _faudes.TransSetEvX2X1_RestrictSet(self, rOtherSet)

    def __add__(self, rOtherSet):
        return _faudes.TransSetEvX2X1___add__(self, rOtherSet)

    def __sub__(self, rOtherSet):
        return _faudes.TransSetEvX2X1___sub__(self, rOtherSet)

    def __mul__(self, rOtherSet):
        return _faudes.TransSetEvX2X1___mul__(self, rOtherSet)

    def __le__(self, rOtherSet):
        return _faudes.TransSetEvX2X1___le__(self, rOtherSet)

    def __lt__(self, rOtherSet):
        return _faudes.TransSetEvX2X1___lt__(self, rOtherSet)

    def __eq__(self, rOtherSet):
        return _faudes.TransSetEvX2X1___eq__(self, rOtherSet)

    def Detach(self):
        return _faudes.TransSetEvX2X1_Detach(self)

    def Lock(self):
        return _faudes.TransSetEvX2X1_Lock(self)

    def EraseByX1(self, x1):
        return _faudes.TransSetEvX2X1_EraseByX1(self, x1)

    def EraseByX1Ev(self, x1, ev):
        return _faudes.TransSetEvX2X1_EraseByX1Ev(self, x1, ev)

    def EraseByX2(self, x2):
        return _faudes.TransSetEvX2X1_EraseByX2(self, x2)

    def EraseByX1OrX2(self, x):
        return _faudes.TransSetEvX2X1_EraseByX1OrX2(self, x)

    def RestrictStates(self, states):
        return _faudes.TransSetEvX2X1_RestrictStates(self, states)

    def ExistsByX1OrX2(self, x):
        return _faudes.TransSetEvX2X1_ExistsByX1OrX2(self, x)

    def ExistsByX1Ev(self, x1, ev):
        return _faudes.TransSetEvX2X1_ExistsByX1Ev(self, x1, ev)

    def ExistsByX1(self, x1):
        return _faudes.TransSetEvX2X1_ExistsByX1(self, x1)

    def Insert(self, *args):
        return _faudes.TransSetEvX2X1_Insert(self, *args)

    def Erase(self, *args):
        return _faudes.TransSetEvX2X1_Erase(self, *args)

    def EraseByEv(self, *args):
        return _faudes.TransSetEvX2X1_EraseByEv(self, *args)

    def Exists(self, *args):
        return _faudes.TransSetEvX2X1_Exists(self, *args)

    def Find(self, *args):
        return _faudes.TransSetEvX2X1_Find(self, *args)

    def Begin(self, *args):
        return _faudes.TransSetEvX2X1_Begin(self, *args)

    def End(self, *args):
        return _faudes.TransSetEvX2X1_End(self, *args)

    def BeginByEv(self, ev):
        return _faudes.TransSetEvX2X1_BeginByEv(self, ev)

    def EndByEv(self, ev):
        return _faudes.TransSetEvX2X1_EndByEv(self, ev)

    def BeginByEvX1(self, ev, x1):
        return _faudes.TransSetEvX2X1_BeginByEvX1(self, ev, x1)

    def EndByEvX1(self, ev, x1):
        return _faudes.TransSetEvX2X1_EndByEvX1(self, ev, x1)

    def BeginByEvX2(self, ev, x2):
        return _faudes.TransSetEvX2X1_BeginByEvX2(self, ev, x2)

    def EndByEvX2(self, ev, x2):
        return _faudes.TransSetEvX2X1_EndByEvX2(self, ev, x2)

    def BeginByX2(self, x2):
        return _faudes.TransSetEvX2X1_BeginByX2(self, x2)

    def EndByX2(self, x2):
        return _faudes.TransSetEvX2X1_EndByX2(self, x2)

    def BeginByX2Ev(self, x2, ev):
        return _faudes.TransSetEvX2X1_BeginByX2Ev(self, x2, ev)

    def EndByX2Ev(self, x2, ev):
        return _faudes.TransSetEvX2X1_EndByX2Ev(self, x2, ev)

    def ReSort(self, *args):
        return _faudes.TransSetEvX2X1_ReSort(self, *args)

    def States(self):
        return _faudes.TransSetEvX2X1_States(self)

    def SuccessorStates(self, *args):
        return _faudes.TransSetEvX2X1_SuccessorStates(self, *args)

    def ActiveEvents(self, x1, pSymTab=None):
        return _faudes.TransSetEvX2X1_ActiveEvents(self, x1, pSymTab)

    def Str(self, *args):
        return _faudes.TransSetEvX2X1_Str(self, *args)

# Register TransSetEvX2X1 in _faudes:
_faudes.TransSetEvX2X1_swigregister(TransSetEvX2X1)
class Generator(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.Generator_swiginit(self, _faudes.new_Generator(*args))
    __swig_destroy__ = _faudes.delete_Generator

    def New(self):
        return _faudes.Generator_New(self)

    def Copy(self):
        return _faudes.Generator_Copy(self)

    def Version(self, *args):
        return _faudes.Generator_Version(self, *args)

    def Name(self, *args):
        return _faudes.Generator_Name(self, *args)

    def EventIndex(self, rName):
        return _faudes.Generator_EventIndex(self, rName)

    def EventName(self, *args):
        return _faudes.Generator_EventName(self, *args)

    def UniqueEventName(self, rName):
        return _faudes.Generator_UniqueEventName(self, rName)

    def EventRename(self, *args):
        return _faudes.Generator_EventRename(self, *args)

    def StateIndex(self, rName):
        return _faudes.Generator_StateIndex(self, rName)

    def StateName(self, *args):
        return _faudes.Generator_StateName(self, *args)

    def UniqueStateName(self, rName):
        return _faudes.Generator_UniqueStateName(self, rName)

    def ClearStateNames(self):
        return _faudes.Generator_ClearStateNames(self)

    def ClrStateName(self, *args):
        return _faudes.Generator_ClrStateName(self, *args)

    def StateNamesEnabled(self, *args):
        return _faudes.Generator_StateNamesEnabled(self, *args)

    def SetDefaultStateNames(self):
        return _faudes.Generator_SetDefaultStateNames(self)

    def EnforceStateNames(self, rTemplate):
        return _faudes.Generator_EnforceStateNames(self, rTemplate)

    def EStr(self, *args):
        return _faudes.Generator_EStr(self, *args)

    def SStr(self, *args):
        return _faudes.Generator_SStr(self, *args)

    def TStr(self, *args):
        return _faudes.Generator_TStr(self, *args)

    def GraphWrite(self, *args):
        return _faudes.Generator_GraphWrite(self, *args)

    def AlphabetToString(self):
        return _faudes.Generator_AlphabetToString(self)

    def WriteAlphabet(self, *args):
        return _faudes.Generator_WriteAlphabet(self, *args)

    def StateSetToString(self, rStateSet):
        return _faudes.Generator_StateSetToString(self, rStateSet)

    def WriteStateSet(self, *args):
        return _faudes.Generator_WriteStateSet(self, *args)

    def DWriteStateSet(self, rTw, rStateSet):
        return _faudes.Generator_DWriteStateSet(self, rTw, rStateSet)

    def StatesToString(self):
        return _faudes.Generator_StatesToString(self)

    def MarkedStatesToString(self):
        return _faudes.Generator_MarkedStatesToString(self)

    def InitStatesToString(self):
        return _faudes.Generator_InitStatesToString(self)

    def TransRelToString(self):
        return _faudes.Generator_TransRelToString(self)

    def WriteTransRel(self, *args):
        return _faudes.Generator_WriteTransRel(self, *args)

    def DWriteTransRel(self, rTw):
        return _faudes.Generator_DWriteTransRel(self, rTw)

    def DotWrite(self, rFileName):
        return _faudes.Generator_DotWrite(self, rFileName)

    def DDotWrite(self, rFileName):
        return _faudes.Generator_DDotWrite(self, rFileName)

    def ReadStateSet(self, rTr, rLabel, rStateSet):
        return _faudes.Generator_ReadStateSet(self, rTr, rLabel, rStateSet)

    def Valid(self):
        return _faudes.Generator_Valid(self)

    def Clear(self):
        return _faudes.Generator_Clear(self)

    def ClearStates(self):
        return _faudes.Generator_ClearStates(self)

    def Size(self):
        return _faudes.Generator_Size(self)

    def AlphabetSize(self):
        return _faudes.Generator_AlphabetSize(self)

    def TransRelSize(self):
        return _faudes.Generator_TransRelSize(self)

    def InitStatesSize(self):
        return _faudes.Generator_InitStatesSize(self)

    def MarkedStatesSize(self):
        return _faudes.Generator_MarkedStatesSize(self)

    def Empty(self):
        return _faudes.Generator_Empty(self)

    def AlphabetEmpty(self):
        return _faudes.Generator_AlphabetEmpty(self)

    def TransRelEmpty(self):
        return _faudes.Generator_TransRelEmpty(self)

    def InitStatesEmpty(self):
        return _faudes.Generator_InitStatesEmpty(self)

    def MarkedStatesEmpty(self):
        return _faudes.Generator_MarkedStatesEmpty(self)

    def UsedEvents(self):
        return _faudes.Generator_UsedEvents(self)

    def UnusedEvents(self):
        return _faudes.Generator_UnusedEvents(self)

    def ActiveEventSet(self, x1):
        return _faudes.Generator_ActiveEventSet(self, x1)

    def ActiveTransSet(self, x1):
        return _faudes.Generator_ActiveTransSet(self, x1)

    def TransRelStates(self):
        return _faudes.Generator_TransRelStates(self)

    def SuccessorStates(self, *args):
        return _faudes.Generator_SuccessorStates(self, *args)

    def SuccessorState(self, x1, ev):
        return _faudes.Generator_SuccessorState(self, x1, ev)

    def AlphabetBegin(self):
        return _faudes.Generator_AlphabetBegin(self)

    def AlphabetEnd(self):
        return _faudes.Generator_AlphabetEnd(self)

    def ExistsEvent(self, *args):
        return _faudes.Generator_ExistsEvent(self, *args)

    def FindEvent(self, *args):
        return _faudes.Generator_FindEvent(self, *args)

    def Alphabet(self):
        return _faudes.Generator_Alphabet(self)

    def StatesBegin(self):
        return _faudes.Generator_StatesBegin(self)

    def StatesEnd(self):
        return _faudes.Generator_StatesEnd(self)

    def ExistsState(self, *args):
        return _faudes.Generator_ExistsState(self, *args)

    def FindState(self, *args):
        return _faudes.Generator_FindState(self, *args)

    def States(self):
        return _faudes.Generator_States(self)

    def InitState(self):
        return _faudes.Generator_InitState(self)

    def InitStatesBegin(self):
        return _faudes.Generator_InitStatesBegin(self)

    def InitStatesEnd(self):
        return _faudes.Generator_InitStatesEnd(self)

    def ExistsInitState(self, index):
        return _faudes.Generator_ExistsInitState(self, index)

    def FindInitState(self, index):
        return _faudes.Generator_FindInitState(self, index)

    def InitStates(self):
        return _faudes.Generator_InitStates(self)

    def MarkedStatesBegin(self):
        return _faudes.Generator_MarkedStatesBegin(self)

    def MarkedStatesEnd(self):
        return _faudes.Generator_MarkedStatesEnd(self)

    def ExistsMarkedState(self, index):
        return _faudes.Generator_ExistsMarkedState(self, index)

    def FindMarkedState(self, index):
        return _faudes.Generator_FindMarkedState(self, index)

    def MarkedStates(self):
        return _faudes.Generator_MarkedStates(self)

    def TransRelBegin(self, *args):
        return _faudes.Generator_TransRelBegin(self, *args)

    def TransRelEnd(self, *args):
        return _faudes.Generator_TransRelEnd(self, *args)

    def FindTransition(self, *args):
        return _faudes.Generator_FindTransition(self, *args)

    def ExistsTransition(self, *args):
        return _faudes.Generator_ExistsTransition(self, *args)

    def TransRel(self, *args):
        return _faudes.Generator_TransRel(self, *args)

    def InsEvent(self, *args):
        return _faudes.Generator_InsEvent(self, *args)

    def InsEvents(self, events):
        return _faudes.Generator_InsEvents(self, events)

    def DelEvent(self, *args):
        return _faudes.Generator_DelEvent(self, *args)

    def DelEvents(self, rEvents):
        return _faudes.Generator_DelEvents(self, rEvents)

    def DelEventFromAlphabet(self, index):
        return _faudes.Generator_DelEventFromAlphabet(self, index)

    def InjectAlphabet(self, newalphabet):
        return _faudes.Generator_InjectAlphabet(self, newalphabet)

    def RestrictAlphabet(self, restriction):
        return _faudes.Generator_RestrictAlphabet(self, restriction)

    def InsState(self, *args):
        return _faudes.Generator_InsState(self, *args)

    def InsStates(self, states):
        return _faudes.Generator_InsStates(self, states)

    def DelState(self, *args):
        return _faudes.Generator_DelState(self, *args)

    def DelStates(self, rDelStates):
        return _faudes.Generator_DelStates(self, rDelStates)

    def DelStateFromStates(self, *args):
        return _faudes.Generator_DelStateFromStates(self, *args)

    def RestrictStates(self, rDelStates):
        return _faudes.Generator_RestrictStates(self, rDelStates)

    def InjectState(self, index):
        return _faudes.Generator_InjectState(self, index)

    def InjectStates(self, rNewStates):
        return _faudes.Generator_InjectStates(self, rNewStates)

    def InsInitState(self, *args):
        return _faudes.Generator_InsInitState(self, *args)

    def InsInitStates(self, states):
        return _faudes.Generator_InsInitStates(self, states)

    def SetInitState(self, *args):
        return _faudes.Generator_SetInitState(self, *args)

    def ClrInitState(self, *args):
        return _faudes.Generator_ClrInitState(self, *args)

    def ClearInitStates(self):
        return _faudes.Generator_ClearInitStates(self)

    def InjectInitStates(self, rNewInitStates):
        return _faudes.Generator_InjectInitStates(self, rNewInitStates)

    def InsMarkedState(self, *args):
        return _faudes.Generator_InsMarkedState(self, *args)

    def InsMarkedStates(self, states):
        return _faudes.Generator_InsMarkedStates(self, states)

    def SetMarkedState(self, *args):
        return _faudes.Generator_SetMarkedState(self, *args)

    def ClrMarkedState(self, *args):
        return _faudes.Generator_ClrMarkedState(self, *args)

    def ClearMarkedStates(self):
        return _faudes.Generator_ClearMarkedStates(self)

    def InjectMarkedStates(self, rNewMarkedStates):
        return _faudes.Generator_InjectMarkedStates(self, rNewMarkedStates)

    def SetTransition(self, *args):
        return _faudes.Generator_SetTransition(self, *args)

    def ClrTransition(self, *args):
        return _faudes.Generator_ClrTransition(self, *args)

    def ClrTransitions(self, *args):
        return _faudes.Generator_ClrTransitions(self, *args)

    def ClearTransRel(self):
        return _faudes.Generator_ClearTransRel(self)

    def InjectTransition(self, rTrans):
        return _faudes.Generator_InjectTransition(self, rTrans)

    def InjectTransRel(self, newtransset):
        return _faudes.Generator_InjectTransRel(self, newtransset)

    def AccessibleSet(self):
        return _faudes.Generator_AccessibleSet(self)

    def Accessible(self):
        return _faudes.Generator_Accessible(self)

    def IsAccessible(self):
        return _faudes.Generator_IsAccessible(self)

    def CoaccessibleSet(self):
        return _faudes.Generator_CoaccessibleSet(self)

    def Coaccessible(self):
        return _faudes.Generator_Coaccessible(self)

    def IsCoaccessible(self):
        return _faudes.Generator_IsCoaccessible(self)

    def TrimSet(self):
        return _faudes.Generator_TrimSet(self)

    def Trim(self):
        return _faudes.Generator_Trim(self)

    def IsTrim(self):
        return _faudes.Generator_IsTrim(self)

    def BlockingStates(self):
        return _faudes.Generator_BlockingStates(self)

    def Complete(self):
        return _faudes.Generator_Complete(self)

    def IsComplete(self):
        return _faudes.Generator_IsComplete(self)

    def TerminalStates(self):
        return _faudes.Generator_TerminalStates(self)

    def IsDeterministic(self):
        return _faudes.Generator_IsDeterministic(self)

    def SetMinStateIndexMap(self):
        return _faudes.Generator_SetMinStateIndexMap(self)

    def ClearMinStateIndexMap(self):
        return _faudes.Generator_ClearMinStateIndexMap(self)

    def MinStateIndex(self, *args):
        return _faudes.Generator_MinStateIndex(self, *args)

    def MaxStateIndex(self):
        return _faudes.Generator_MaxStateIndex(self)

    def MinimizeAlphabet(self):
        return _faudes.Generator_MinimizeAlphabet(self)

# Register Generator in _faudes:
_faudes.Generator_swigregister(Generator)
class System(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.System_swiginit(self, _faudes.new_System(*args))
    __swig_destroy__ = _faudes.delete_System

    def New(self):
        return _faudes.System_New(self)

    def Copy(self):
        return _faudes.System_Copy(self)

    def Version(self, *args):
        return _faudes.System_Version(self, *args)

    def ClearAttributes(self):
        return _faudes.System_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.System_UpdateAttributes(self)

    def States(self):
        return _faudes.System_States(self)

    def Alphabet(self):
        return _faudes.System_Alphabet(self)

    def TransRel(self):
        return _faudes.System_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.System_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.System_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.System_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.System_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.System_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.System_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.System_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.System_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.System_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.System_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.System_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.System_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.System_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.System_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.System_GlobalAttribute(self, *args)

    def InsControllableEvent(self, *args):
        return _faudes.System_InsControllableEvent(self, *args)

    def InsUncontrollableEvent(self, *args):
        return _faudes.System_InsUncontrollableEvent(self, *args)

    def SetControllable(self, *args):
        return _faudes.System_SetControllable(self, *args)

    def ClrControllable(self, *args):
        return _faudes.System_ClrControllable(self, *args)

    def Controllable(self, *args):
        return _faudes.System_Controllable(self, *args)

    def ControllableEvents(self):
        return _faudes.System_ControllableEvents(self)

    def UncontrollableEvents(self):
        return _faudes.System_UncontrollableEvents(self)

    def InsObservableEvent(self, *args):
        return _faudes.System_InsObservableEvent(self, *args)

    def InsUnobservableEvent(self, *args):
        return _faudes.System_InsUnobservableEvent(self, *args)

    def SetObservable(self, *args):
        return _faudes.System_SetObservable(self, *args)

    def ClrObservable(self, *args):
        return _faudes.System_ClrObservable(self, *args)

    def Observable(self, *args):
        return _faudes.System_Observable(self, *args)

    def ObservableEvents(self):
        return _faudes.System_ObservableEvents(self)

    def UnobservableEvents(self):
        return _faudes.System_UnobservableEvents(self)

    def InsForcibleEvent(self, *args):
        return _faudes.System_InsForcibleEvent(self, *args)

    def InsUnforcibleEvent(self, *args):
        return _faudes.System_InsUnforcibleEvent(self, *args)

    def SetForcible(self, *args):
        return _faudes.System_SetForcible(self, *args)

    def ClrForcible(self, *args):
        return _faudes.System_ClrForcible(self, *args)

    def Forcible(self, *args):
        return _faudes.System_Forcible(self, *args)

    def ForcibleEvents(self):
        return _faudes.System_ForcibleEvents(self)

    def UnforcibleEvents(self):
        return _faudes.System_UnforcibleEvents(self)

    def InsHighlevelEvent(self, *args):
        return _faudes.System_InsHighlevelEvent(self, *args)

    def InsLowlevelEvent(self, *args):
        return _faudes.System_InsLowlevelEvent(self, *args)

    def SetHighlevel(self, *args):
        return _faudes.System_SetHighlevel(self, *args)

    def SetLowlevel(self, *args):
        return _faudes.System_SetLowlevel(self, *args)

    def Highlevel(self, *args):
        return _faudes.System_Highlevel(self, *args)

    def Lowlevel(self, *args):
        return _faudes.System_Lowlevel(self, *args)

    def HighlevelEvents(self):
        return _faudes.System_HighlevelEvents(self)

    def LowlevelEvents(self):
        return _faudes.System_LowlevelEvents(self)

# Register System in _faudes:
_faudes.System_swigregister(System)
class EventSetVector(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.EventSetVector_swiginit(self, _faudes.new_EventSetVector(*args))
    __swig_destroy__ = _faudes.delete_EventSetVector

    def Assign(self, rType):
        return _faudes.EventSetVector_Assign(self, rType)

    def Copy(self):
        return _faudes.EventSetVector_Copy(self)

    def Clear(self):
        return _faudes.EventSetVector_Clear(self)

    def Write(self, *args):
        return _faudes.EventSetVector_Write(self, *args)

    def ToString(self, *args):
        return _faudes.EventSetVector_ToString(self, *args)

    def DWrite(self, *args):
        return _faudes.EventSetVector_DWrite(self, *args)

    def SWrite(self):
        return _faudes.EventSetVector_SWrite(self)

    def XWrite(self, *args):
        return _faudes.EventSetVector_XWrite(self, *args)

    def Read(self, *args):
        return _faudes.EventSetVector_Read(self, *args)

    def FromString(self, *args):
        return _faudes.EventSetVector_FromString(self, *args)

    def __str__(self):
        return _faudes.EventSetVector___str__(self)

    def Name(self, *args):
        return _faudes.EventSetVector_Name(self, *args)

    def Size(self, *args):
        return _faudes.EventSetVector_Size(self, *args)

    def Empty(self):
        return _faudes.EventSetVector_Empty(self)

    def At(self, *args):
        return _faudes.EventSetVector_At(self, *args)

    def __getitem__(self, pos):
        return _faudes.EventSetVector___getitem__(self, pos)

    def __setitem__(self, pos, elem):
        return _faudes.EventSetVector___setitem__(self, pos, elem)

    def Replace(self, *args):
        return _faudes.EventSetVector_Replace(self, *args)

    def Erase(self, pos):
        return _faudes.EventSetVector_Erase(self, pos)

    def Insert(self, *args):
        return _faudes.EventSetVector_Insert(self, *args)

    def PushBack(self, *args):
        return _faudes.EventSetVector_PushBack(self, *args)

    def Append(self, *args):
        return _faudes.EventSetVector_Append(self, *args)

    def FilenameAt(self, *args):
        return _faudes.EventSetVector_FilenameAt(self, *args)

# Register EventSetVector in _faudes:
_faudes.EventSetVector_swigregister(EventSetVector)
class AlphabetVector(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.AlphabetVector_swiginit(self, _faudes.new_AlphabetVector(*args))
    __swig_destroy__ = _faudes.delete_AlphabetVector

    def Assign(self, rType):
        return _faudes.AlphabetVector_Assign(self, rType)

    def Copy(self):
        return _faudes.AlphabetVector_Copy(self)

    def Clear(self):
        return _faudes.AlphabetVector_Clear(self)

    def Write(self, *args):
        return _faudes.AlphabetVector_Write(self, *args)

    def ToString(self, *args):
        return _faudes.AlphabetVector_ToString(self, *args)

    def DWrite(self, *args):
        return _faudes.AlphabetVector_DWrite(self, *args)

    def SWrite(self):
        return _faudes.AlphabetVector_SWrite(self)

    def XWrite(self, *args):
        return _faudes.AlphabetVector_XWrite(self, *args)

    def Read(self, *args):
        return _faudes.AlphabetVector_Read(self, *args)

    def FromString(self, *args):
        return _faudes.AlphabetVector_FromString(self, *args)

    def __str__(self):
        return _faudes.AlphabetVector___str__(self)

    def Name(self, *args):
        return _faudes.AlphabetVector_Name(self, *args)

    def Size(self, *args):
        return _faudes.AlphabetVector_Size(self, *args)

    def Empty(self):
        return _faudes.AlphabetVector_Empty(self)

    def At(self, *args):
        return _faudes.AlphabetVector_At(self, *args)

    def __getitem__(self, pos):
        return _faudes.AlphabetVector___getitem__(self, pos)

    def __setitem__(self, pos, elem):
        return _faudes.AlphabetVector___setitem__(self, pos, elem)

    def Replace(self, *args):
        return _faudes.AlphabetVector_Replace(self, *args)

    def Erase(self, pos):
        return _faudes.AlphabetVector_Erase(self, pos)

    def Insert(self, *args):
        return _faudes.AlphabetVector_Insert(self, *args)

    def PushBack(self, *args):
        return _faudes.AlphabetVector_PushBack(self, *args)

    def Append(self, *args):
        return _faudes.AlphabetVector_Append(self, *args)

    def FilenameAt(self, *args):
        return _faudes.AlphabetVector_FilenameAt(self, *args)

# Register AlphabetVector in _faudes:
_faudes.AlphabetVector_swigregister(AlphabetVector)
class GeneratorVector(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.GeneratorVector_swiginit(self, _faudes.new_GeneratorVector(*args))
    __swig_destroy__ = _faudes.delete_GeneratorVector

    def Assign(self, rType):
        return _faudes.GeneratorVector_Assign(self, rType)

    def Copy(self):
        return _faudes.GeneratorVector_Copy(self)

    def Clear(self):
        return _faudes.GeneratorVector_Clear(self)

    def Write(self, *args):
        return _faudes.GeneratorVector_Write(self, *args)

    def ToString(self, *args):
        return _faudes.GeneratorVector_ToString(self, *args)

    def DWrite(self, *args):
        return _faudes.GeneratorVector_DWrite(self, *args)

    def SWrite(self):
        return _faudes.GeneratorVector_SWrite(self)

    def XWrite(self, *args):
        return _faudes.GeneratorVector_XWrite(self, *args)

    def Read(self, *args):
        return _faudes.GeneratorVector_Read(self, *args)

    def FromString(self, *args):
        return _faudes.GeneratorVector_FromString(self, *args)

    def __str__(self):
        return _faudes.GeneratorVector___str__(self)

    def Name(self, *args):
        return _faudes.GeneratorVector_Name(self, *args)

    def Size(self, *args):
        return _faudes.GeneratorVector_Size(self, *args)

    def Empty(self):
        return _faudes.GeneratorVector_Empty(self)

    def At(self, *args):
        return _faudes.GeneratorVector_At(self, *args)

    def __getitem__(self, pos):
        return _faudes.GeneratorVector___getitem__(self, pos)

    def __setitem__(self, pos, elem):
        return _faudes.GeneratorVector___setitem__(self, pos, elem)

    def Replace(self, *args):
        return _faudes.GeneratorVector_Replace(self, *args)

    def Erase(self, pos):
        return _faudes.GeneratorVector_Erase(self, pos)

    def Insert(self, *args):
        return _faudes.GeneratorVector_Insert(self, *args)

    def PushBack(self, *args):
        return _faudes.GeneratorVector_PushBack(self, *args)

    def Append(self, *args):
        return _faudes.GeneratorVector_Append(self, *args)

    def FilenameAt(self, *args):
        return _faudes.GeneratorVector_FilenameAt(self, *args)

# Register GeneratorVector in _faudes:
_faudes.GeneratorVector_swigregister(GeneratorVector)
class SystemVector(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.SystemVector_swiginit(self, _faudes.new_SystemVector(*args))
    __swig_destroy__ = _faudes.delete_SystemVector

    def Assign(self, rType):
        return _faudes.SystemVector_Assign(self, rType)

    def Copy(self):
        return _faudes.SystemVector_Copy(self)

    def Clear(self):
        return _faudes.SystemVector_Clear(self)

    def Write(self, *args):
        return _faudes.SystemVector_Write(self, *args)

    def ToString(self, *args):
        return _faudes.SystemVector_ToString(self, *args)

    def DWrite(self, *args):
        return _faudes.SystemVector_DWrite(self, *args)

    def SWrite(self):
        return _faudes.SystemVector_SWrite(self)

    def XWrite(self, *args):
        return _faudes.SystemVector_XWrite(self, *args)

    def Read(self, *args):
        return _faudes.SystemVector_Read(self, *args)

    def FromString(self, *args):
        return _faudes.SystemVector_FromString(self, *args)

    def __str__(self):
        return _faudes.SystemVector___str__(self)

    def Name(self, *args):
        return _faudes.SystemVector_Name(self, *args)

    def Size(self, *args):
        return _faudes.SystemVector_Size(self, *args)

    def Empty(self):
        return _faudes.SystemVector_Empty(self)

    def At(self, *args):
        return _faudes.SystemVector_At(self, *args)

    def __getitem__(self, pos):
        return _faudes.SystemVector___getitem__(self, pos)

    def __setitem__(self, pos, elem):
        return _faudes.SystemVector___setitem__(self, pos, elem)

    def Replace(self, *args):
        return _faudes.SystemVector_Replace(self, *args)

    def Erase(self, pos):
        return _faudes.SystemVector_Erase(self, pos)

    def Insert(self, *args):
        return _faudes.SystemVector_Insert(self, *args)

    def PushBack(self, *args):
        return _faudes.SystemVector_PushBack(self, *args)

    def Append(self, *args):
        return _faudes.SystemVector_Append(self, *args)

    def FilenameAt(self, *args):
        return _faudes.SystemVector_FilenameAt(self, *args)

# Register SystemVector in _faudes:
_faudes.SystemVector_swigregister(SystemVector)
class IndexSetVector(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.IndexSetVector_swiginit(self, _faudes.new_IndexSetVector(*args))
    __swig_destroy__ = _faudes.delete_IndexSetVector

    def Assign(self, rType):
        return _faudes.IndexSetVector_Assign(self, rType)

    def Copy(self):
        return _faudes.IndexSetVector_Copy(self)

    def Clear(self):
        return _faudes.IndexSetVector_Clear(self)

    def Write(self, *args):
        return _faudes.IndexSetVector_Write(self, *args)

    def ToString(self, *args):
        return _faudes.IndexSetVector_ToString(self, *args)

    def DWrite(self, *args):
        return _faudes.IndexSetVector_DWrite(self, *args)

    def SWrite(self):
        return _faudes.IndexSetVector_SWrite(self)

    def XWrite(self, *args):
        return _faudes.IndexSetVector_XWrite(self, *args)

    def Read(self, *args):
        return _faudes.IndexSetVector_Read(self, *args)

    def FromString(self, *args):
        return _faudes.IndexSetVector_FromString(self, *args)

    def __str__(self):
        return _faudes.IndexSetVector___str__(self)

    def Name(self, *args):
        return _faudes.IndexSetVector_Name(self, *args)

    def Size(self, *args):
        return _faudes.IndexSetVector_Size(self, *args)

    def Empty(self):
        return _faudes.IndexSetVector_Empty(self)

    def At(self, *args):
        return _faudes.IndexSetVector_At(self, *args)

    def __getitem__(self, pos):
        return _faudes.IndexSetVector___getitem__(self, pos)

    def __setitem__(self, pos, elem):
        return _faudes.IndexSetVector___setitem__(self, pos, elem)

    def Replace(self, *args):
        return _faudes.IndexSetVector_Replace(self, *args)

    def Erase(self, pos):
        return _faudes.IndexSetVector_Erase(self, pos)

    def Insert(self, *args):
        return _faudes.IndexSetVector_Insert(self, *args)

    def PushBack(self, *args):
        return _faudes.IndexSetVector_PushBack(self, *args)

    def Append(self, *args):
        return _faudes.IndexSetVector_Append(self, *args)

    def FilenameAt(self, *args):
        return _faudes.IndexSetVector_FilenameAt(self, *args)

# Register IndexSetVector in _faudes:
_faudes.IndexSetVector_swigregister(IndexSetVector)

def Version(*args):
    return _faudes.Version(*args)

def LanguageConcatenateNonDet(rGen1, rGen2, rRes):
    return _faudes.LanguageConcatenateNonDet(rGen1, rGen2, rRes)

def LanguageUnionNonDet(rGen1, rGen2, rResGen):
    return _faudes.LanguageUnionNonDet(rGen1, rGen2, rResGen)

def KleeneClosureNonDet(rGen):
    return _faudes.KleeneClosureNonDet(rGen)

def ProjectNonDet(rGen, rAlph):
    return _faudes.ProjectNonDet(rGen, rAlph)

def ProjectNonDetScc(rGen, rAlph):
    return _faudes.ProjectNonDetScc(rGen, rAlph)

def EventSetUnion(rAlph1, rAlph2, rRes):
    return _faudes.EventSetUnion(rAlph1, rAlph2, rRes)

def EventSetIntersection(rAlph1, rAlph2, rRes):
    return _faudes.EventSetIntersection(rAlph1, rAlph2, rRes)

def EventSetDifference(rAlph1, rAlph2, rRes):
    return _faudes.EventSetDifference(rAlph1, rAlph2, rRes)
class ProductCompositionMap(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.ProductCompositionMap_swiginit(self, _faudes.new_ProductCompositionMap(*args))
    __swig_destroy__ = _faudes.delete_ProductCompositionMap

    def CompState(self, s1, s2):
        return _faudes.ProductCompositionMap_CompState(self, s1, s2)

    def Arg1State(self, s12):
        return _faudes.ProductCompositionMap_Arg1State(self, s12)

    def Arg2State(self, s12):
        return _faudes.ProductCompositionMap_Arg2State(self, s12)

    def ToString(self):
        return _faudes.ProductCompositionMap_ToString(self)

# Register ProductCompositionMap in _faudes:
_faudes.ProductCompositionMap_swigregister(ProductCompositionMap)
class SccFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _faudes.SccFilter_swiginit(self, _faudes.new_SccFilter())
    __swig_destroy__ = _faudes.delete_SccFilter

    def Clear(self):
        return _faudes.SccFilter_Clear(self)

    def EventsAvoid(self, rEventsAvoid):
        return _faudes.SccFilter_EventsAvoid(self, rEventsAvoid)

    def IgnoreTrivial(self, flag):
        return _faudes.SccFilter_IgnoreTrivial(self, flag)

    def FindFirst(self, flag):
        return _faudes.SccFilter_FindFirst(self, flag)

    def StatesAvoid(self, *args):
        return _faudes.SccFilter_StatesAvoid(self, *args)

    def StatesRequire(self, *args):
        return _faudes.SccFilter_StatesRequire(self, *args)

# Register SccFilter in _faudes:
_faudes.SccFilter_swigregister(SccFilter)

def ComputeScc(*args):
    return _faudes.ComputeScc(*args)

def ComputeNextScc(rGen, rFilter, rScc):
    return _faudes.ComputeNextScc(rGen, rFilter, rScc)

def HasScc(rGen, rFilter):
    return _faudes.HasScc(rGen, rFilter)
class EventRelabelMap(Type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ToString(self):
        return _faudes.EventRelabelMap_ToString(self)

    def __str__(self):
        return _faudes.EventRelabelMap___str__(self)

    def __init__(self):
        _faudes.EventRelabelMap_swiginit(self, _faudes.new_EventRelabelMap())
    __swig_destroy__ = _faudes.delete_EventRelabelMap

# Register EventRelabelMap in _faudes:
_faudes.EventRelabelMap_swigregister(EventRelabelMap)
class ColorSet(EventSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.ColorSet_swiginit(self, _faudes.new_ColorSet(*args))

    def New(self):
        return _faudes.ColorSet_New(self)

    def Copy(self):
        return _faudes.ColorSet_Copy(self)
    __swig_destroy__ = _faudes.delete_ColorSet

# Register ColorSet in _faudes:
_faudes.ColorSet_swigregister(ColorSet)
class AttributeColoredState(AttributeFlags):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.AttributeColoredState_swiginit(self, _faudes.new_AttributeColoredState(*args))

    def Colors(self, *args):
        return _faudes.AttributeColoredState_Colors(self, *args)

    def ColorsBegin(self):
        return _faudes.AttributeColoredState_ColorsBegin(self)

    def ColorsEnd(self):
        return _faudes.AttributeColoredState_ColorsEnd(self)
    __swig_destroy__ = _faudes.delete_AttributeColoredState

# Register AttributeColoredState in _faudes:
_faudes.AttributeColoredState_swigregister(AttributeColoredState)
class MtcSystem(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.MtcSystem_swiginit(self, _faudes.new_MtcSystem(*args))
    __swig_destroy__ = _faudes.delete_MtcSystem

    def New(self):
        return _faudes.MtcSystem_New(self)

    def Copy(self):
        return _faudes.MtcSystem_Copy(self)

    def Version(self, *args):
        return _faudes.MtcSystem_Version(self, *args)

    def ClearAttributes(self):
        return _faudes.MtcSystem_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.MtcSystem_UpdateAttributes(self)

    def States(self):
        return _faudes.MtcSystem_States(self)

    def Alphabet(self):
        return _faudes.MtcSystem_Alphabet(self)

    def TransRel(self):
        return _faudes.MtcSystem_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.MtcSystem_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.MtcSystem_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.MtcSystem_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.MtcSystem_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.MtcSystem_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.MtcSystem_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.MtcSystem_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.MtcSystem_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.MtcSystem_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.MtcSystem_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.MtcSystem_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.MtcSystem_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.MtcSystem_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.MtcSystem_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.MtcSystem_GlobalAttribute(self, *args)

    def InsControllableEvent(self, *args):
        return _faudes.MtcSystem_InsControllableEvent(self, *args)

    def InsUncontrollableEvent(self, *args):
        return _faudes.MtcSystem_InsUncontrollableEvent(self, *args)

    def SetControllable(self, *args):
        return _faudes.MtcSystem_SetControllable(self, *args)

    def ClrControllable(self, *args):
        return _faudes.MtcSystem_ClrControllable(self, *args)

    def Controllable(self, *args):
        return _faudes.MtcSystem_Controllable(self, *args)

    def ControllableEvents(self):
        return _faudes.MtcSystem_ControllableEvents(self)

    def UncontrollableEvents(self):
        return _faudes.MtcSystem_UncontrollableEvents(self)

    def InsObservableEvent(self, *args):
        return _faudes.MtcSystem_InsObservableEvent(self, *args)

    def InsUnobservableEvent(self, *args):
        return _faudes.MtcSystem_InsUnobservableEvent(self, *args)

    def SetObservable(self, *args):
        return _faudes.MtcSystem_SetObservable(self, *args)

    def ClrObservable(self, *args):
        return _faudes.MtcSystem_ClrObservable(self, *args)

    def Observable(self, *args):
        return _faudes.MtcSystem_Observable(self, *args)

    def ObservableEvents(self):
        return _faudes.MtcSystem_ObservableEvents(self)

    def UnobservableEvents(self):
        return _faudes.MtcSystem_UnobservableEvents(self)

    def InsForcibleEvent(self, *args):
        return _faudes.MtcSystem_InsForcibleEvent(self, *args)

    def InsUnforcibleEvent(self, *args):
        return _faudes.MtcSystem_InsUnforcibleEvent(self, *args)

    def SetForcible(self, *args):
        return _faudes.MtcSystem_SetForcible(self, *args)

    def ClrForcible(self, *args):
        return _faudes.MtcSystem_ClrForcible(self, *args)

    def Forcible(self, *args):
        return _faudes.MtcSystem_Forcible(self, *args)

    def ForcibleEvents(self):
        return _faudes.MtcSystem_ForcibleEvents(self)

    def UnforcibleEvents(self):
        return _faudes.MtcSystem_UnforcibleEvents(self)

    def InsHighlevelEvent(self, *args):
        return _faudes.MtcSystem_InsHighlevelEvent(self, *args)

    def InsLowlevelEvent(self, *args):
        return _faudes.MtcSystem_InsLowlevelEvent(self, *args)

    def SetHighlevel(self, *args):
        return _faudes.MtcSystem_SetHighlevel(self, *args)

    def SetLowlevel(self, *args):
        return _faudes.MtcSystem_SetLowlevel(self, *args)

    def Highlevel(self, *args):
        return _faudes.MtcSystem_Highlevel(self, *args)

    def Lowlevel(self, *args):
        return _faudes.MtcSystem_Lowlevel(self, *args)

    def HighlevelEvents(self):
        return _faudes.MtcSystem_HighlevelEvents(self)

    def LowlevelEvents(self):
        return _faudes.MtcSystem_LowlevelEvents(self)

    def InsColoredState(self, *args):
        return _faudes.MtcSystem_InsColoredState(self, *args)

    def InsColor(self, *args):
        return _faudes.MtcSystem_InsColor(self, *args)

    def InsColors(self, stateIndex, rColors):
        return _faudes.MtcSystem_InsColors(self, stateIndex, rColors)

    def DelColor(self, *args):
        return _faudes.MtcSystem_DelColor(self, *args)

    def ClrColors(self, stateIndex):
        return _faudes.MtcSystem_ClrColors(self, stateIndex)

    def Colors(self, *args):
        return _faudes.MtcSystem_Colors(self, *args)

    def ColoredStates(self, *args):
        return _faudes.MtcSystem_ColoredStates(self, *args)

    def UncoloredStates(self):
        return _faudes.MtcSystem_UncoloredStates(self)

    def ExistsColor(self, *args):
        return _faudes.MtcSystem_ExistsColor(self, *args)

    def IsColored(self, *args):
        return _faudes.MtcSystem_IsColored(self, *args)

    def StronglyCoaccessibleSet(self):
        return _faudes.MtcSystem_StronglyCoaccessibleSet(self)

    def StronglyCoaccessible(self):
        return _faudes.MtcSystem_StronglyCoaccessible(self)

    def IsStronglyCoaccessible(self):
        return _faudes.MtcSystem_IsStronglyCoaccessible(self)

    def StronglyTrimSet(self):
        return _faudes.MtcSystem_StronglyTrimSet(self)

    def StronglyTrim(self):
        return _faudes.MtcSystem_StronglyTrim(self)

    def IsStronglyTrim(self):
        return _faudes.MtcSystem_IsStronglyTrim(self)

# Register MtcSystem in _faudes:
_faudes.MtcSystem_swigregister(MtcSystem)
class FailureTypeMap(AttributeFlags):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.FailureTypeMap_swiginit(self, _faudes.new_FailureTypeMap(*args))
    __swig_destroy__ = _faudes.delete_FailureTypeMap

    def Empty(self):
        return _faudes.FailureTypeMap_Empty(self)

    def AddFailureTypeMapping(self, failureType, rfailureEvents):
        return _faudes.FailureTypeMap_AddFailureTypeMapping(self, failureType, rfailureEvents)

    def FailureType(self, failureEvent):
        return _faudes.FailureTypeMap_FailureType(self, failureEvent)

    def AllFailureEvents(self):
        return _faudes.FailureTypeMap_AllFailureEvents(self)

# Register FailureTypeMap in _faudes:
_faudes.FailureTypeMap_swigregister(FailureTypeMap)
class Diagnoser(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.Diagnoser_swiginit(self, _faudes.new_Diagnoser(*args))
    __swig_destroy__ = _faudes.delete_Diagnoser

    def New(self):
        return _faudes.Diagnoser_New(self)

    def Copy(self):
        return _faudes.Diagnoser_Copy(self)

    def Version(self, *args):
        return _faudes.Diagnoser_Version(self, *args)

    def ClearAttributes(self):
        return _faudes.Diagnoser_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.Diagnoser_UpdateAttributes(self)

    def States(self):
        return _faudes.Diagnoser_States(self)

    def Alphabet(self):
        return _faudes.Diagnoser_Alphabet(self)

    def TransRel(self):
        return _faudes.Diagnoser_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.Diagnoser_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.Diagnoser_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.Diagnoser_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.Diagnoser_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.Diagnoser_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.Diagnoser_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.Diagnoser_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.Diagnoser_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.Diagnoser_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.Diagnoser_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.Diagnoser_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.Diagnoser_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.Diagnoser_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.Diagnoser_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.Diagnoser_GlobalAttribute(self, *args)

    def InsFailureTypeMapping(self, failureType, rfailureEvents):
        return _faudes.Diagnoser_InsFailureTypeMapping(self, failureType, rfailureEvents)

# Register Diagnoser in _faudes:
_faudes.Diagnoser_swigregister(Diagnoser)
class HioPlant(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _faudes.delete_HioPlant

    def New(self):
        return _faudes.HioPlant_New(self)

    def Copy(self):
        return _faudes.HioPlant_Copy(self)

    def Version(self, *args):
        return _faudes.HioPlant_Version(self, *args)

    def __init__(self, *args):
        _faudes.HioPlant_swiginit(self, _faudes.new_HioPlant(*args))

    def ClearAttributes(self):
        return _faudes.HioPlant_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.HioPlant_UpdateAttributes(self)

    def States(self):
        return _faudes.HioPlant_States(self)

    def Alphabet(self):
        return _faudes.HioPlant_Alphabet(self)

    def TransRel(self):
        return _faudes.HioPlant_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.HioPlant_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.HioPlant_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.HioPlant_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.HioPlant_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.HioPlant_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.HioPlant_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.HioPlant_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.HioPlant_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.HioPlant_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.HioPlant_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.HioPlant_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.HioPlant_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.HioPlant_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.HioPlant_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.HioPlant_GlobalAttribute(self, *args)

    def InsYpEvent(self, *args):
        return _faudes.HioPlant_InsYpEvent(self, *args)

    def InsUpEvent(self, *args):
        return _faudes.HioPlant_InsUpEvent(self, *args)

    def SetYp(self, *args):
        return _faudes.HioPlant_SetYp(self, *args)

    def SetUp(self, *args):
        return _faudes.HioPlant_SetUp(self, *args)

    def IsYp(self, *args):
        return _faudes.HioPlant_IsYp(self, *args)

    def IsUp(self, *args):
        return _faudes.HioPlant_IsUp(self, *args)

    def YpEvents(self):
        return _faudes.HioPlant_YpEvents(self)

    def UpEvents(self):
        return _faudes.HioPlant_UpEvents(self)

    def InsYeEvent(self, *args):
        return _faudes.HioPlant_InsYeEvent(self, *args)

    def InsUeEvent(self, *args):
        return _faudes.HioPlant_InsUeEvent(self, *args)

    def SetYe(self, *args):
        return _faudes.HioPlant_SetYe(self, *args)

    def SetUe(self, *args):
        return _faudes.HioPlant_SetUe(self, *args)

    def IsYe(self, *args):
        return _faudes.HioPlant_IsYe(self, *args)

    def IsUe(self, *args):
        return _faudes.HioPlant_IsUe(self, *args)

    def YeEvents(self):
        return _faudes.HioPlant_YeEvents(self)

    def UeEvents(self):
        return _faudes.HioPlant_UeEvents(self)

    def IsY(self, *args):
        return _faudes.HioPlant_IsY(self, *args)

    def YEvents(self):
        return _faudes.HioPlant_YEvents(self)

    def IsU(self, *args):
        return _faudes.HioPlant_IsU(self, *args)

    def UEvents(self):
        return _faudes.HioPlant_UEvents(self)

    def IsP(self, *args):
        return _faudes.HioPlant_IsP(self, *args)

    def PEvents(self):
        return _faudes.HioPlant_PEvents(self)

    def IsE(self, *args):
        return _faudes.HioPlant_IsE(self, *args)

    def EEvents(self):
        return _faudes.HioPlant_EEvents(self)

    def IsQYpYe(self, *args):
        return _faudes.HioPlant_IsQYpYe(self, *args)

    def QYpYeStates(self):
        return _faudes.HioPlant_QYpYeStates(self)

    def IsQUp(self, *args):
        return _faudes.HioPlant_IsQUp(self, *args)

    def QUpStates(self):
        return _faudes.HioPlant_QUpStates(self)

    def IsQUe(self, *args):
        return _faudes.HioPlant_IsQUe(self, *args)

    def QUeStates(self):
        return _faudes.HioPlant_QUeStates(self)

    def SetErr(self, *args):
        return _faudes.HioPlant_SetErr(self, *args)

    def ClrErr(self, *args):
        return _faudes.HioPlant_ClrErr(self, *args)

    def IsErr(self, *args):
        return _faudes.HioPlant_IsErr(self, *args)

    def ErrStates(self):
        return _faudes.HioPlant_ErrStates(self)

# Register HioPlant in _faudes:
_faudes.HioPlant_swigregister(HioPlant)
class HioAlphabet(EventSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def New(self):
        return _faudes.HioAlphabet_New(self)

    def Copy(self):
        return _faudes.HioAlphabet_Copy(self)
    __swig_destroy__ = _faudes.delete_HioAlphabet

    def __init__(self, *args):
        _faudes.HioAlphabet_swiginit(self, _faudes.new_HioAlphabet(*args))

    def Insert(self, *args):
        return _faudes.HioAlphabet_Insert(self, *args)

    def Attribute(self, *args):
        return _faudes.HioAlphabet_Attribute(self, *args)

# Register HioAlphabet in _faudes:
_faudes.HioAlphabet_swigregister(HioAlphabet)
class HioController(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _faudes.delete_HioController

    def New(self):
        return _faudes.HioController_New(self)

    def Copy(self):
        return _faudes.HioController_Copy(self)

    def Version(self, *args):
        return _faudes.HioController_Version(self, *args)

    def __init__(self, *args):
        _faudes.HioController_swiginit(self, _faudes.new_HioController(*args))

    def ClearAttributes(self):
        return _faudes.HioController_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.HioController_UpdateAttributes(self)

    def States(self):
        return _faudes.HioController_States(self)

    def Alphabet(self):
        return _faudes.HioController_Alphabet(self)

    def TransRel(self):
        return _faudes.HioController_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.HioController_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.HioController_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.HioController_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.HioController_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.HioController_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.HioController_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.HioController_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.HioController_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.HioController_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.HioController_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.HioController_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.HioController_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.HioController_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.HioController_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.HioController_GlobalAttribute(self, *args)

    def InsYpEvent(self, *args):
        return _faudes.HioController_InsYpEvent(self, *args)

    def InsUpEvent(self, *args):
        return _faudes.HioController_InsUpEvent(self, *args)

    def SetYp(self, *args):
        return _faudes.HioController_SetYp(self, *args)

    def SetUp(self, *args):
        return _faudes.HioController_SetUp(self, *args)

    def IsYp(self, *args):
        return _faudes.HioController_IsYp(self, *args)

    def IsUp(self, *args):
        return _faudes.HioController_IsUp(self, *args)

    def YpEvents(self):
        return _faudes.HioController_YpEvents(self)

    def UpEvents(self):
        return _faudes.HioController_UpEvents(self)

    def InsYcEvent(self, *args):
        return _faudes.HioController_InsYcEvent(self, *args)

    def InsUcEvent(self, *args):
        return _faudes.HioController_InsUcEvent(self, *args)

    def SetYc(self, *args):
        return _faudes.HioController_SetYc(self, *args)

    def SetUc(self, *args):
        return _faudes.HioController_SetUc(self, *args)

    def IsYc(self, *args):
        return _faudes.HioController_IsYc(self, *args)

    def IsUc(self, *args):
        return _faudes.HioController_IsUc(self, *args)

    def YcEvents(self):
        return _faudes.HioController_YcEvents(self)

    def UcEvents(self):
        return _faudes.HioController_UcEvents(self)

    def IsY(self, *args):
        return _faudes.HioController_IsY(self, *args)

    def YEvents(self):
        return _faudes.HioController_YEvents(self)

    def IsU(self, *args):
        return _faudes.HioController_IsU(self, *args)

    def UEvents(self):
        return _faudes.HioController_UEvents(self)

    def IsP(self, *args):
        return _faudes.HioController_IsP(self, *args)

    def PEvents(self):
        return _faudes.HioController_PEvents(self)

    def IsC(self, *args):
        return _faudes.HioController_IsC(self, *args)

    def CEvents(self):
        return _faudes.HioController_CEvents(self)

    def IsQYP(self, *args):
        return _faudes.HioController_IsQYP(self, *args)

    def QYPStates(self):
        return _faudes.HioController_QYPStates(self)

    def IsQUp(self, *args):
        return _faudes.HioController_IsQUp(self, *args)

    def QUpStates(self):
        return _faudes.HioController_QUpStates(self)

    def IsQUc(self, *args):
        return _faudes.HioController_IsQUc(self, *args)

    def QUcStates(self):
        return _faudes.HioController_QUcStates(self)

    def IsQYcUp(self, *args):
        return _faudes.HioController_IsQYcUp(self, *args)

    def QYcUpStates(self):
        return _faudes.HioController_QYcUpStates(self)

    def SetErr(self, *args):
        return _faudes.HioController_SetErr(self, *args)

    def ClrErr(self, *args):
        return _faudes.HioController_ClrErr(self, *args)

    def IsErr(self, *args):
        return _faudes.HioController_IsErr(self, *args)

    def ErrStates(self):
        return _faudes.HioController_ErrStates(self)

# Register HioController in _faudes:
_faudes.HioController_swigregister(HioController)
class HioEnvironment(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _faudes.delete_HioEnvironment

    def New(self):
        return _faudes.HioEnvironment_New(self)

    def Copy(self):
        return _faudes.HioEnvironment_Copy(self)

    def Version(self, *args):
        return _faudes.HioEnvironment_Version(self, *args)

    def __init__(self, *args):
        _faudes.HioEnvironment_swiginit(self, _faudes.new_HioEnvironment(*args))

    def ClearAttributes(self):
        return _faudes.HioEnvironment_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.HioEnvironment_UpdateAttributes(self)

    def States(self):
        return _faudes.HioEnvironment_States(self)

    def Alphabet(self):
        return _faudes.HioEnvironment_Alphabet(self)

    def TransRel(self):
        return _faudes.HioEnvironment_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.HioEnvironment_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.HioEnvironment_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.HioEnvironment_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.HioEnvironment_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.HioEnvironment_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.HioEnvironment_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.HioEnvironment_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.HioEnvironment_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.HioEnvironment_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.HioEnvironment_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.HioEnvironment_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.HioEnvironment_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.HioEnvironment_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.HioEnvironment_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.HioEnvironment_GlobalAttribute(self, *args)

    def InsYeEvent(self, *args):
        return _faudes.HioEnvironment_InsYeEvent(self, *args)

    def InsUeEvent(self, *args):
        return _faudes.HioEnvironment_InsUeEvent(self, *args)

    def SetYe(self, *args):
        return _faudes.HioEnvironment_SetYe(self, *args)

    def SetUe(self, *args):
        return _faudes.HioEnvironment_SetUe(self, *args)

    def IsYe(self, *args):
        return _faudes.HioEnvironment_IsYe(self, *args)

    def IsUe(self, *args):
        return _faudes.HioEnvironment_IsUe(self, *args)

    def YeEvents(self):
        return _faudes.HioEnvironment_YeEvents(self)

    def UeEvents(self):
        return _faudes.HioEnvironment_UeEvents(self)

    def InsYlEvent(self, *args):
        return _faudes.HioEnvironment_InsYlEvent(self, *args)

    def InsUlEvent(self, *args):
        return _faudes.HioEnvironment_InsUlEvent(self, *args)

    def SetYl(self, *args):
        return _faudes.HioEnvironment_SetYl(self, *args)

    def SetUl(self, *args):
        return _faudes.HioEnvironment_SetUl(self, *args)

    def IsYl(self, *args):
        return _faudes.HioEnvironment_IsYl(self, *args)

    def IsUl(self, *args):
        return _faudes.HioEnvironment_IsUl(self, *args)

    def YlEvents(self):
        return _faudes.HioEnvironment_YlEvents(self)

    def UlEvents(self):
        return _faudes.HioEnvironment_UlEvents(self)

    def IsY(self, *args):
        return _faudes.HioEnvironment_IsY(self, *args)

    def YEvents(self):
        return _faudes.HioEnvironment_YEvents(self)

    def IsU(self, *args):
        return _faudes.HioEnvironment_IsU(self, *args)

    def UEvents(self):
        return _faudes.HioEnvironment_UEvents(self)

    def IsE(self, *args):
        return _faudes.HioEnvironment_IsE(self, *args)

    def EEvents(self):
        return _faudes.HioEnvironment_EEvents(self)

    def IsL(self, *args):
        return _faudes.HioEnvironment_IsL(self, *args)

    def LEvents(self):
        return _faudes.HioEnvironment_LEvents(self)

    def IsQYe(self, *args):
        return _faudes.HioEnvironment_IsQYe(self, *args)

    def QYeStates(self):
        return _faudes.HioEnvironment_QYeStates(self)

    def IsQUe(self, *args):
        return _faudes.HioEnvironment_IsQUe(self, *args)

    def QUeStates(self):
        return _faudes.HioEnvironment_QUeStates(self)

    def IsQUl(self, *args):
        return _faudes.HioEnvironment_IsQUl(self, *args)

    def QUlStates(self):
        return _faudes.HioEnvironment_QUlStates(self)

    def IsQYlUe(self, *args):
        return _faudes.HioEnvironment_IsQYlUe(self, *args)

    def QYlUeStates(self):
        return _faudes.HioEnvironment_QYlUeStates(self)

    def SetErr(self, *args):
        return _faudes.HioEnvironment_SetErr(self, *args)

    def ClrErr(self, *args):
        return _faudes.HioEnvironment_ClrErr(self, *args)

    def IsErr(self, *args):
        return _faudes.HioEnvironment_IsErr(self, *args)

    def ErrStates(self):
        return _faudes.HioEnvironment_ErrStates(self)

# Register HioEnvironment in _faudes:
_faudes.HioEnvironment_swigregister(HioEnvironment)
class HioConstraint(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _faudes.delete_HioConstraint

    def New(self):
        return _faudes.HioConstraint_New(self)

    def Copy(self):
        return _faudes.HioConstraint_Copy(self)

    def Version(self, *args):
        return _faudes.HioConstraint_Version(self, *args)

    def __init__(self, *args):
        _faudes.HioConstraint_swiginit(self, _faudes.new_HioConstraint(*args))

    def ClearAttributes(self):
        return _faudes.HioConstraint_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.HioConstraint_UpdateAttributes(self)

    def States(self):
        return _faudes.HioConstraint_States(self)

    def Alphabet(self):
        return _faudes.HioConstraint_Alphabet(self)

    def TransRel(self):
        return _faudes.HioConstraint_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.HioConstraint_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.HioConstraint_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.HioConstraint_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.HioConstraint_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.HioConstraint_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.HioConstraint_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.HioConstraint_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.HioConstraint_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.HioConstraint_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.HioConstraint_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.HioConstraint_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.HioConstraint_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.HioConstraint_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.HioConstraint_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.HioConstraint_GlobalAttribute(self, *args)

    def InsYEvent(self, *args):
        return _faudes.HioConstraint_InsYEvent(self, *args)

    def InsUEvent(self, *args):
        return _faudes.HioConstraint_InsUEvent(self, *args)

    def SetY(self, *args):
        return _faudes.HioConstraint_SetY(self, *args)

    def SetU(self, *args):
        return _faudes.HioConstraint_SetU(self, *args)

    def IsY(self, *args):
        return _faudes.HioConstraint_IsY(self, *args)

    def IsU(self, *args):
        return _faudes.HioConstraint_IsU(self, *args)

    def YEvents(self):
        return _faudes.HioConstraint_YEvents(self)

    def UEvents(self):
        return _faudes.HioConstraint_UEvents(self)

    def IsQY(self, *args):
        return _faudes.HioConstraint_IsQY(self, *args)

    def QYStates(self):
        return _faudes.HioConstraint_QYStates(self)

    def IsQU(self, *args):
        return _faudes.HioConstraint_IsQU(self, *args)

    def QUStates(self):
        return _faudes.HioConstraint_QUStates(self)

    def SetErr(self, *args):
        return _faudes.HioConstraint_SetErr(self, *args)

    def ClrErr(self, *args):
        return _faudes.HioConstraint_ClrErr(self, *args)

    def IsErr(self, *args):
        return _faudes.HioConstraint_IsErr(self, *args)

    def ErrStates(self):
        return _faudes.HioConstraint_ErrStates(self)

# Register HioConstraint in _faudes:
_faudes.HioConstraint_swigregister(HioConstraint)
class IoSystem(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _faudes.IoSystem_swiginit(self, _faudes.new_IoSystem(*args))
    __swig_destroy__ = _faudes.delete_IoSystem

    def New(self):
        return _faudes.IoSystem_New(self)

    def Copy(self):
        return _faudes.IoSystem_Copy(self)

    def Version(self, *args):
        return _faudes.IoSystem_Version(self, *args)

    def ClearAttributes(self):
        return _faudes.IoSystem_ClearAttributes(self)

    def UpdateAttributes(self):
        return _faudes.IoSystem_UpdateAttributes(self)

    def States(self):
        return _faudes.IoSystem_States(self)

    def Alphabet(self):
        return _faudes.IoSystem_Alphabet(self)

    def TransRel(self):
        return _faudes.IoSystem_TransRel(self)

    def ClearEventAttributes(self):
        return _faudes.IoSystem_ClearEventAttributes(self)

    def InsEvents(self, events):
        return _faudes.IoSystem_InsEvents(self, events)

    def InsEvent(self, *args):
        return _faudes.IoSystem_InsEvent(self, *args)

    def ClrEventAttribute(self, index):
        return _faudes.IoSystem_ClrEventAttribute(self, index)

    def EventAttribute(self, *args):
        return _faudes.IoSystem_EventAttribute(self, *args)

    def ClearStateAttributes(self):
        return _faudes.IoSystem_ClearStateAttributes(self)

    def InsState(self, *args):
        return _faudes.IoSystem_InsState(self, *args)

    def ClrStateAttribute(self, index):
        return _faudes.IoSystem_ClrStateAttribute(self, index)

    def StateAttribute(self, *args):
        return _faudes.IoSystem_StateAttribute(self, *args)

    def ClearTransAttributes(self):
        return _faudes.IoSystem_ClearTransAttributes(self)

    def SetTransition(self, *args):
        return _faudes.IoSystem_SetTransition(self, *args)

    def ClrTransAttribute(self, rTrans):
        return _faudes.IoSystem_ClrTransAttribute(self, rTrans)

    def TransAttribute(self, *args):
        return _faudes.IoSystem_TransAttribute(self, *args)

    def ClearGlobalAttribute(self):
        return _faudes.IoSystem_ClearGlobalAttribute(self)

    def GlobalAttribute(self, *args):
        return _faudes.IoSystem_GlobalAttribute(self, *args)

    def InsOutputEvent(self, *args):
        return _faudes.IoSystem_InsOutputEvent(self, *args)

    def InsInputEvent(self, *args):
        return _faudes.IoSystem_InsInputEvent(self, *args)

    def OutputEvents(self):
        return _faudes.IoSystem_OutputEvents(self)

    def OutputEvent(self, *args):
        return _faudes.IoSystem_OutputEvent(self, *args)

    def SetOutputEvent(self, *args):
        return _faudes.IoSystem_SetOutputEvent(self, *args)

    def ClrOutputEvent(self, *args):
        return _faudes.IoSystem_ClrOutputEvent(self, *args)

    def InputEvents(self):
        return _faudes.IoSystem_InputEvents(self)

    def InputEvent(self, *args):
        return _faudes.IoSystem_InputEvent(self, *args)

    def SetInputEvent(self, *args):
        return _faudes.IoSystem_SetInputEvent(self, *args)

    def ClrInputEvent(self, *args):
        return _faudes.IoSystem_ClrInputEvent(self, *args)

    def OutputStates(self):
        return _faudes.IoSystem_OutputStates(self)

    def OutputState(self, *args):
        return _faudes.IoSystem_OutputState(self, *args)

    def SetOutputState(self, *args):
        return _faudes.IoSystem_SetOutputState(self, *args)

    def ClrOutputState(self, *args):
        return _faudes.IoSystem_ClrOutputState(self, *args)

    def InputStates(self):
        return _faudes.IoSystem_InputStates(self)

    def InputState(self, *args):
        return _faudes.IoSystem_InputState(self, *args)

    def SetInputState(self, *args):
        return _faudes.IoSystem_SetInputState(self, *args)

    def ClrInputState(self, *args):
        return _faudes.IoSystem_ClrInputState(self, *args)

    def ErrorStates(self):
        return _faudes.IoSystem_ErrorStates(self)

    def ErrorState(self, *args):
        return _faudes.IoSystem_ErrorState(self, *args)

    def SetErrorState(self, *args):
        return _faudes.IoSystem_SetErrorState(self, *args)

    def ClrErrorState(self, *args):
        return _faudes.IoSystem_ClrErrorState(self, *args)

# Register IoSystem in _faudes:
_faudes.IoSystem_swigregister(IoSystem)
class IoAlphabet(EventSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def New(self):
        return _faudes.IoAlphabet_New(self)

    def Copy(self):
        return _faudes.IoAlphabet_Copy(self)
    __swig_destroy__ = _faudes.delete_IoAlphabet

    def __init__(self, *args):
        _faudes.IoAlphabet_swiginit(self, _faudes.new_IoAlphabet(*args))

    def Insert(self, *args):
        return _faudes.IoAlphabet_Insert(self, *args)

    def Attribute(self, *args):
        return _faudes.IoAlphabet_Attribute(self, *args)

# Register IoAlphabet in _faudes:
_faudes.IoAlphabet_swigregister(IoAlphabet)
class AttributePriority(AttributeCFlags):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _faudes.AttributePriority_swiginit(self, _faudes.new_AttributePriority())
    __swig_destroy__ = _faudes.delete_AttributePriority

    def Priority(self, *args):
        return _faudes.AttributePriority_Priority(self, *args)

# Register AttributePriority in _faudes:
_faudes.AttributePriority_swigregister(AttributePriority)
class EventPrioritiesPlain(EventSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def New(self):
        return _faudes.EventPrioritiesPlain_New(self)

    def Copy(self):
        return _faudes.EventPrioritiesPlain_Copy(self)
    __swig_destroy__ = _faudes.delete_EventPrioritiesPlain

    def __init__(self, *args):
        _faudes.EventPrioritiesPlain_swiginit(self, _faudes.new_EventPrioritiesPlain(*args))

    def Insert(self, *args):
        return _faudes.EventPrioritiesPlain_Insert(self, *args)

    def Attribute(self, *args):
        return _faudes.EventPrioritiesPlain_Attribute(self, *args)

# Register EventPrioritiesPlain in _faudes:
_faudes.EventPrioritiesPlain_swigregister(EventPrioritiesPlain)
class EventPriorities(EventPrioritiesPlain):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def New(self):
        return _faudes.EventPriorities_New(self)

    def Copy(self):
        return _faudes.EventPriorities_Copy(self)
    __swig_destroy__ = _faudes.delete_EventPriorities

    def __init__(self, *args):
        _faudes.EventPriorities_swiginit(self, _faudes.new_EventPriorities(*args))

    def Priority(self, *args):
        return _faudes.EventPriorities_Priority(self, *args)

    def InsPriority(self, *args):
        return _faudes.EventPriorities_InsPriority(self, *args)

    def Priorities(self, rOther):
        return _faudes.EventPriorities_Priorities(self, rOther)

    def LowestPriority(self):
        return _faudes.EventPriorities_LowestPriority(self)

    def HighestPriority(self):
        return _faudes.EventPriorities_HighestPriority(self)

# Register EventPriorities in _faudes:
_faudes.EventPriorities_swigregister(EventPriorities)

def Accessible(*args):
    return _faudes.Accessible(*args)

def AlphabetDifference(arg1, arg2, arg3):
    return _faudes.AlphabetDifference(arg1, arg2, arg3)

def AlphabetEquality(arg1, arg2):
    return _faudes.AlphabetEquality(arg1, arg2)

def AlphabetExtract(arg1, arg2):
    return _faudes.AlphabetExtract(arg1, arg2)

def AlphabetInclusion(arg1, arg2):
    return _faudes.AlphabetInclusion(arg1, arg2)

def AlphabetIntersection(*args):
    return _faudes.AlphabetIntersection(*args)

def AlphabetLanguage(arg1, arg2):
    return _faudes.AlphabetLanguage(arg1, arg2)

def AlphabetUnion(*args):
    return _faudes.AlphabetUnion(*args)

def Automaton(*args):
    return _faudes.Automaton(*args)

def BuechiClosure(arg1):
    return _faudes.BuechiClosure(arg1)

def BuechiCon(*args):
    return _faudes.BuechiCon(*args)

def BuechiConNorm(*args):
    return _faudes.BuechiConNorm(*args)

def BuechiParallel(arg1, arg2, arg3):
    return _faudes.BuechiParallel(arg1, arg2, arg3)

def BuechiProduct(arg1, arg2, arg3):
    return _faudes.BuechiProduct(arg1, arg2, arg3)

def BuechiTrim(*args):
    return _faudes.BuechiTrim(*args)

def Coaccessible(*args):
    return _faudes.Coaccessible(*args)

def Complete(*args):
    return _faudes.Complete(*args)

def ConDecExtension(arg1, arg2, arg3):
    return _faudes.ConDecExtension(arg1, arg2, arg3)

def DecentralizedDiagnoser(arg1, arg2, arg3, arg4):
    return _faudes.DecentralizedDiagnoser(arg1, arg2, arg3, arg4)

def DecentralizedModularDiagnoser(arg1, arg2, arg3):
    return _faudes.DecentralizedModularDiagnoser(arg1, arg2, arg3)

def Deterministic(arg1, arg2):
    return _faudes.Deterministic(arg1, arg2)

def EmptyLanguage(arg1, arg2):
    return _faudes.EmptyLanguage(arg1, arg2)

def EmptyStringLanguage(arg1, arg2):
    return _faudes.EmptyStringLanguage(arg1, arg2)

def EventDiagnoser(arg1, arg2, arg3):
    return _faudes.EventDiagnoser(arg1, arg2, arg3)

def FullLanguage(arg1, arg2):
    return _faudes.FullLanguage(arg1, arg2)

def HioFreeInput(*args):
    return _faudes.HioFreeInput(*args)

def HioShuffle(*args):
    return _faudes.HioShuffle(*args)

def HioStatePartition(*args):
    return _faudes.HioStatePartition(*args)

def HioSynth(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _faudes.HioSynth(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)

def HioSynthHierarchical(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _faudes.HioSynthHierarchical(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def HioSynthMonolithic(arg1, arg2, arg3, arg4, arg5, arg6):
    return _faudes.HioSynthMonolithic(arg1, arg2, arg3, arg4, arg5, arg6)

def InsertRelabeledEvents(*args):
    return _faudes.InsertRelabeledEvents(*args)

def IntegerSum(*args):
    return _faudes.IntegerSum(*args)

def InvProject(*args):
    return _faudes.InvProject(*args)

def IoFreeInput(*args):
    return _faudes.IoFreeInput(*args)

def IoStatePartition(arg1):
    return _faudes.IoStatePartition(arg1)

def IoSynthesis(arg1, arg2, arg3):
    return _faudes.IoSynthesis(arg1, arg2, arg3)

def IoSynthesisClosed(arg1, arg2, arg3):
    return _faudes.IoSynthesisClosed(arg1, arg2, arg3)

def IsAccessible(arg1):
    return _faudes.IsAccessible(arg1)

def IsBuechiClosed(arg1):
    return _faudes.IsBuechiClosed(arg1)

def IsBuechiControllable(*args):
    return _faudes.IsBuechiControllable(*args)

def IsBuechiRelativelyClosed(arg1, arg2):
    return _faudes.IsBuechiRelativelyClosed(arg1, arg2)

def IsBuechiTrim(arg1):
    return _faudes.IsBuechiTrim(arg1)

def IsClosed(arg1):
    return _faudes.IsClosed(arg1)

def IsCoDiagnosable(arg1, arg2, arg3):
    return _faudes.IsCoDiagnosable(arg1, arg2, arg3)

def IsCoaccessible(arg1):
    return _faudes.IsCoaccessible(arg1)

def IsComplete(*args):
    return _faudes.IsComplete(*args)

def IsConditionalClosed(arg1, arg2, arg3, arg4):
    return _faudes.IsConditionalClosed(arg1, arg2, arg3, arg4)

def IsConditionalControllable(arg1, arg2, arg3, arg4, arg5):
    return _faudes.IsConditionalControllable(arg1, arg2, arg3, arg4, arg5)

def IsConditionalDecomposable(arg1, arg2, arg3, arg4):
    return _faudes.IsConditionalDecomposable(arg1, arg2, arg3, arg4)

def IsControllable(*args):
    return _faudes.IsControllable(*args)

def IsDeterministic(arg1):
    return _faudes.IsDeterministic(arg1)

def IsEmptyLanguage(arg1):
    return _faudes.IsEmptyLanguage(arg1)

def IsEventDiagnosable(arg1, arg2):
    return _faudes.IsEventDiagnosable(arg1, arg2)

def IsHioConstraintForm(*args):
    return _faudes.IsHioConstraintForm(*args)

def IsHioControllerForm(*args):
    return _faudes.IsHioControllerForm(*args)

def IsHioEnvironmentForm(*args):
    return _faudes.IsHioEnvironmentForm(*args)

def IsHioPlantForm(*args):
    return _faudes.IsHioPlantForm(*args)

def IsIndicatorEventDiagnosable(arg1, arg2):
    return _faudes.IsIndicatorEventDiagnosable(arg1, arg2)

def IsInputLocallyFree(arg1):
    return _faudes.IsInputLocallyFree(arg1)

def IsInputOmegaFree(arg1):
    return _faudes.IsInputOmegaFree(arg1)

def IsIoSystem(arg1):
    return _faudes.IsIoSystem(arg1)

def IsLanguageDiagnosable(arg1, arg2):
    return _faudes.IsLanguageDiagnosable(arg1, arg2)

def IsLocallyControlConsistent(*args):
    return _faudes.IsLocallyControlConsistent(*args)

def IsLoopPreservingObserver(arg1, arg2):
    return _faudes.IsLoopPreservingObserver(arg1, arg2)

def IsModularDiagnosable(arg1, arg2):
    return _faudes.IsModularDiagnosable(arg1, arg2)

def IsMsaObserver(arg1, arg2):
    return _faudes.IsMsaObserver(arg1, arg2)

def IsMtcObserver(arg1, arg2):
    return _faudes.IsMtcObserver(arg1, arg2)

def IsMutuallyControllable(arg1, arg2):
    return _faudes.IsMutuallyControllable(arg1, arg2)

def IsNaturalObserver(arg1, arg2):
    return _faudes.IsNaturalObserver(arg1, arg2)

def IsNonblocking(*args):
    return _faudes.IsNonblocking(*args)

def IsNormal(*args):
    return _faudes.IsNormal(*args)

def IsOutputControlConsistent(*args):
    return _faudes.IsOutputControlConsistent(*args)

def IsPNonblocking(arg1, arg2):
    return _faudes.IsPNonblocking(arg1, arg2)

def IsRelativelyClosed(arg1, arg2):
    return _faudes.IsRelativelyClosed(arg1, arg2)

def IsRelativelyMarked(arg1, arg2):
    return _faudes.IsRelativelyMarked(arg1, arg2)

def IsRelativelyRefixClosed(arg1, arg2):
    return _faudes.IsRelativelyRefixClosed(arg1, arg2)

def IsStdSynthesisConsistent(*args):
    return _faudes.IsStdSynthesisConsistent(*args)

def IsStronglyCoaccessible(arg1):
    return _faudes.IsStronglyCoaccessible(arg1)

def IsStronglyTrim(arg1):
    return _faudes.IsStronglyTrim(arg1)

def IsTrim(arg1):
    return _faudes.IsTrim(arg1)

def KleeneClosure(*args):
    return _faudes.KleeneClosure(*args)

def LanguageComplement(*args):
    return _faudes.LanguageComplement(*args)

def LanguageConcatenate(arg1, arg2, arg3):
    return _faudes.LanguageConcatenate(arg1, arg2, arg3)

def LanguageDiagnoser(arg1, arg2, arg3):
    return _faudes.LanguageDiagnoser(arg1, arg2, arg3)

def LanguageDifference(arg1, arg2, arg3):
    return _faudes.LanguageDifference(arg1, arg2, arg3)

def LanguageDisjoint(arg1, arg2):
    return _faudes.LanguageDisjoint(arg1, arg2)

def LanguageEquality(arg1, arg2):
    return _faudes.LanguageEquality(arg1, arg2)

def LanguageInclusion(arg1, arg2):
    return _faudes.LanguageInclusion(arg1, arg2)

def LanguageIntersection(*args):
    return _faudes.LanguageIntersection(*args)

def LanguageUnion(*args):
    return _faudes.LanguageUnion(*args)

def LoopPreservingObserver(arg1, arg2, arg3):
    return _faudes.LoopPreservingObserver(arg1, arg2, arg3)

def MarkAllStates(arg1):
    return _faudes.MarkAllStates(arg1)

def ModularDiagnoser(arg1, arg2, arg3):
    return _faudes.ModularDiagnoser(arg1, arg2, arg3)

def MsaObserver(arg1, arg2):
    return _faudes.MsaObserver(arg1, arg2)

def MsaObserverLcc(arg1, arg2, arg3):
    return _faudes.MsaObserverLcc(arg1, arg2, arg3)

def MtcDeterministic(arg1, arg2):
    return _faudes.MtcDeterministic(arg1, arg2)

def MtcInvProject(*args):
    return _faudes.MtcInvProject(*args)

def MtcNaturalObserver(arg1, arg2):
    return _faudes.MtcNaturalObserver(arg1, arg2)

def MtcParallel(arg1, arg2, arg3):
    return _faudes.MtcParallel(arg1, arg2, arg3)

def MtcProject(arg1, arg2, arg3):
    return _faudes.MtcProject(arg1, arg2, arg3)

def MtcProjectNonDet(*args):
    return _faudes.MtcProjectNonDet(*args)

def MtcStateMin(arg1, arg2):
    return _faudes.MtcStateMin(arg1, arg2)

def MtcSupCon(arg1, arg2, arg3):
    return _faudes.MtcSupCon(arg1, arg2, arg3)

def MtcSupConClosed(arg1, arg2, arg3):
    return _faudes.MtcSupConClosed(arg1, arg2, arg3)

def NaturalObserverExtension(arg1, arg2):
    return _faudes.NaturalObserverExtension(arg1, arg2)

def NaturalObserverLcc(arg1, arg2, arg3):
    return _faudes.NaturalObserverLcc(arg1, arg2, arg3)

def NaturalObserverRelabeling(arg1, arg2, arg3, arg4):
    return _faudes.NaturalObserverRelabeling(arg1, arg2, arg3, arg4)

def OptimalColorSet(arg1, arg2, arg3):
    return _faudes.OptimalColorSet(arg1, arg2, arg3)

def Parallel(*args):
    return _faudes.Parallel(*args)

def ParallelLive(*args):
    return _faudes.ParallelLive(*args)

def PrefixClosure(arg1):
    return _faudes.PrefixClosure(arg1)

def Product(*args):
    return _faudes.Product(*args)

def Project(arg1, arg2, arg3):
    return _faudes.Project(arg1, arg2, arg3)

def RemoveIoDummyStates(arg1):
    return _faudes.RemoveIoDummyStates(arg1)

def SelfLoop(arg1, arg2):
    return _faudes.SelfLoop(arg1, arg2)

def ShapePriorities(arg1, arg2):
    return _faudes.ShapePriorities(arg1, arg2)

def StateMin(*args):
    return _faudes.StateMin(*args)

def StronglyCoaccessible(*args):
    return _faudes.StronglyCoaccessible(*args)

def StronglyTrim(*args):
    return _faudes.StronglyTrim(*args)

def SupBuechiCon(*args):
    return _faudes.SupBuechiCon(*args)

def SupBuechiConNorm(*args):
    return _faudes.SupBuechiConNorm(*args)

def SupClosed(arg1, arg2):
    return _faudes.SupClosed(arg1, arg2)

def SupCon(*args):
    return _faudes.SupCon(*args)

def SupConClosed(*args):
    return _faudes.SupConClosed(*args)

def SupConCmpl(*args):
    return _faudes.SupConCmpl(*args)

def SupConCmplClosed(*args):
    return _faudes.SupConCmplClosed(*args)

def SupConNB(*args):
    return _faudes.SupConNB(*args)

def SupConNorm(*args):
    return _faudes.SupConNorm(*args)

def SupConNormClosed(*args):
    return _faudes.SupConNormClosed(*args)

def SupConNormCmpl(*args):
    return _faudes.SupConNormCmpl(*args)

def SupConditionalControllable(arg1, arg2, arg3, arg4, arg5, arg6):
    return _faudes.SupConditionalControllable(arg1, arg2, arg3, arg4, arg5, arg6)

def SupNorm(*args):
    return _faudes.SupNorm(*args)

def SupNormClosed(*args):
    return _faudes.SupNormClosed(*args)

def SupReduce(arg1, arg2, arg3):
    return _faudes.SupReduce(arg1, arg2, arg3)

def SupRelativelyClosed(arg1, arg2, arg3):
    return _faudes.SupRelativelyClosed(arg1, arg2, arg3)

def SupRelativelyPrefixClosed(arg1, arg2, arg3):
    return _faudes.SupRelativelyPrefixClosed(arg1, arg2, arg3)

def SupTcon(*args):
    return _faudes.SupTcon(*args)

def Trim(*args):
    return _faudes.Trim(*args)

def UniqueInit(*args):
    return _faudes.UniqueInit(*args)

def ccTrim(arg1, arg2):
    return _faudes.ccTrim(arg1, arg2)

