<Generator>
"G_controller and rt4"

% 1) recognize workpiece arrival (G_full) and G_stp, forbid all G_events
% and turn rt4 from x position (which is presumed) to y position.

% 2) recognize workpiece has left (G_arrtr) and G_stp, forbid all G_events
% and turn rt4 from y position (which is presumed) back to x position.

<Alphabet>
"G_r"         "G_l"         "G_stp"       "G_wait"      "G_full"      "G_arrtl"     
"G_arrtr"     "G_STP"       "G_TR"        "G_FL"        "G_WAIT"      "G_FULL"      
"G_ARRTL"     "G_ARRTR"     
"rt4mvx" "rt4mvy" "rt4arx" "rt4ary" "rt4stp"
</Alphabet>

<States>
<Consecutive>
1             9
</Consecutive>
</States>

<TransRel>
% recognize workpiece arrival, move rt4
1 "G_full" 2
2 "G_stp"  3
3 "rt4mvy" 4
4 "rt4ary" 5
5 "rt4stp" 1
% recognize workpiece has left, move back rt4
1 "G_arrtr" 6
6 "G_stp"   7
7 "rt4mvx"  8
8 "rt4arx"  9
9 "rt4stp"  1
% selfloops in states, where G_events are not forbidden
1 "G_r" 1
1 "G_l" 1
1 "G_stp" 1
1 "G_wait" 1
1 "G_arrtl" 1
1 "G_STP" 1
1 "G_TR" 1
1 "G_FL" 1
1 "G_WAIT" 1
1 "G_FULL" 1
1 "G_ARRTL" 1
1 "G_ARRTR" 1
2 "G_r" 2
2 "G_l" 2
2 "G_full" 2
2 "G_wait" 2
2 "G_arrtl" 2
2 "G_arrtr" 2
2 "G_STP" 2
2 "G_TR" 2
2 "G_FL" 2
2 "G_WAIT" 2
2 "G_FULL" 2
2 "G_ARRTL" 2
2 "G_ARRTR" 2
6 "G_r" 6
6 "G_l" 6
6 "G_full" 6
6 "G_wait" 6
6 "G_arrtl" 6
6 "G_arrtr" 6
6 "G_STP" 6
6 "G_TR" 6
6 "G_FL" 6
6 "G_WAIT" 6
6 "G_FULL" 6
6 "G_ARRTL" 6
6 "G_ARRTR" 6
</TransRel>

<InitStates>
1             
</InitStates>

<MarkedStates>
        
</MarkedStates>


</Generator>
