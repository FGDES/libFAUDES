<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Registry SYSTEM "registry.dtd">
<Registry> 
<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Alphabet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Alphabet" ctype="faudes::Alphabet" autoregister="true"> 

<Documentation ref="corefaudes_alphabet.html#Alphabet"> 
Basic alphabet with controllability attributes.
</Documentation> 
<Keywords> 
CoreFaudes    events        "controllability alphabet"  
</Keywords> 

<XElementTag value="Event"/>

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Boolean -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Boolean" ctype="faudes::Boolean"> 

<Documentation ref="corefaudes_elementary.html#Boolean"> 
Elementary type to hold a boolean value true or false.
</Documentation> 
<Keywords> 
CoreFaudes    "elementary type"  true          false         
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type EventSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::EventSet" ctype="faudes::EventSet" autoregister="true"> 

<Documentation ref="corefaudes_alphabet.html#EventSet"> 
Basic alphabet.
</Documentation> 
<Keywords> 
CoreFaudes    events        alphabet      
</Keywords> 

<XElementTag value="Event"/>

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type EventSetVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::EventSetVector" ctype="faudes::EventSetVector" autoregister="true"> 

<Documentation ref="corefaudes_vector.html#EventSetVector"> 
Vector of alphabets
</Documentation> 
<Keywords> 
CoreFaudes    vector        eventset      alphabet      
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Generator -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Generator" ctype="faudes::Generator" autoregister="true"> 

<Documentation ref="corefaudes_generator.html#Generator"> 
Basic generator model G=(Sigma,Q,delta,Qo,Qm).
</Documentation> 
<Keywords> 
CoreFaudes    generator     states        events        transitions   
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type GeneratorVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::GeneratorVector" ctype="faudes::GeneratorVector" autoregister="true"> 

<Documentation ref="corefaudes_vector.html#GeneratorVector"> 
Vector of generators
</Documentation> 
<Keywords> 
CoreFaudes    vector        generator     
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Integer -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Integer" ctype="faudes::Integer"> 

<Documentation ref="corefaudes_elementary.html#Integer"> 
Elementary type to hold a 32bit signed integer value.
</Documentation> 
<Keywords> 
CoreFaudes    "elementary type"  
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type IntegerVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::IntegerVector" ctype="faudes::IntegerVector"> 

<Documentation ref="corefaudes_elementary.html#IntegerVector"> 
Vector of integers
</Documentation> 
<Keywords> 
CoreFaudes    "elementary type"  vector        integer       
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type StateSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::StateSet" ctype="faudes::StateSet" autoregister="true"> 
<XElementTag value="State"/>
</TypeDefinition> 



<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type String -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::String" ctype="faudes::String"> 

<Documentation ref="corefaudes_elementary.html#String"> 
Elementary type to hold an ASCII encoded string
</Documentation> 
<Keywords> 
CoreFaudes    "elementary type"  
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type System -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::System" ctype="faudes::System" autoregister="true"> 

<Documentation ref="corefaudes_generator.html#System"> 
Generator model G=(Sigma,Q,delta,Qo,Qm) with controllability attributes.
</Documentation> 
<Keywords> 
CoreFaudes    generator     system        "controllablility attribute"  states        events        
transitions   
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type SystemVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::SystemVector" ctype="faudes::SystemVector" autoregister="true"> 

<Documentation ref="corefaudes_vector.html#SystemVector"> 
Vector of systems
</Documentation> 
<Keywords> 
CoreFaudes    vector        generator     system        
</Keywords> 

</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type TransSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::TransSet" ctype="faudes::TransSet" autoregister="true"> 
<XElementTag value="Tr"/>
</TypeDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type ProductCompositionMap -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::ProductCompositionMap" ctype="faudes::ProductCompositionMap" autoregister="true"> 
</TypeDefinition> 

<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Accessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Accessible" ctype="faudes::Accessible"> 

<Documentation ref="corefaudes_reachability.html#Accessible"> 
Delete non-accessible states and transitions.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     accessible    reachable     
</Keywords> 

<VariantSignatures> 

<Signature name="G:=Acc(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 

<Signature name="GRes:=Acc(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetDifference -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetDifference" ctype="faudes::SetDifference"> 

<Documentation ref="corefaudes_alphabet.html#AlphabetDifference"> 
Difference of two alphabets.
</Documentation> 
<Keywords> 
CoreFaudes    EventSet      functions     alphabet      difference    
</Keywords> 

<VariantSignatures> 
<Signature name="Sigma=Sigma1 - Sigma2"> 
<Parameter name="Sigma1" ftype="EventSet" access="In"/> 
<Parameter name="Sigma2" ftype="EventSet" access="In"/> 
<Parameter name="Sigma" ftype="EventSet" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetExtract -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetExtract" ctype="faudes::AlphabetExtract"> 

<Documentation ref="corefaudes_alphabet.html#AlphabetExtract"> 
Extract alphabet from generator.
</Documentation> 
<Keywords> 
CoreFaudes    EventSet  functions     alphabet      difference    
</Keywords> 

<VariantSignatures> 
<Signature name="Sigma(Gen)">
<Parameter name="Gen" ftype="Generator" access="In"/> 
<Parameter name="Sigma" ftype="EventSet" access="Out"/> 
</Signature>
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlpahbetInclusion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetInclusion" ctype="faudes::SetInclusion"> 

<Documentation ref="corefaudes_alphabet.html#AlphabetInclusion"> 
Tests whether an alphabet includes another alphabet.
</Documentation> 
<Keywords> 
CoreFaudes    EventSet      functions     alphabet      inclusion    
</Keywords> 

<VariantSignatures> 
<Signature name="Sigma1 &lt;= Sigma2"> 
<Parameter name="Sigma1" ftype="EventSet" access="In"/> 
<Parameter name="Sigma2" ftype="EventSet" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 

<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlpahbetEquality -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetEquality" ctype="faudes::SetEquality"> 

<Documentation ref="corefaudes_alphabet.html#AlphabetEquality"> 
Tests whether two alphabets match.
</Documentation> 
<Keywords> 
CoreFaudes    EventSet      functions     alphabet   equality    
</Keywords> 

<VariantSignatures> 
<Signature name="Sigma1 == Sigma2"> 
<Parameter name="Sigma1" ftype="EventSet" access="In"/> 
<Parameter name="Sigma2" ftype="EventSet" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetIntersection -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetIntersection" ctype="faudes::SetIntersection"> 

<Documentation ref="corefaudes_alphabet.html#AlphabetIntersection"> 
Intersection over alphabets.
</Documentation> 
<Keywords> 
CoreFaudes    EventSet      functions     alphabet      intersection  
</Keywords> 

<VariantSignatures> 

<Signature name="Sigma=Sigma1 ^ Sigma2"> 
<Parameter name="Sigma1" ftype="EventSet" access="In"/> 
<Parameter name="Sigma2" ftype="EventSet" access="In"/> 
<Parameter name="Sigma" ftype="EventSet" access="Out"/> 
</Signature> 

<Signature name="Sigma = ^_i(Sigma_i)"> 
<Parameter name="AVec" ftype="EventSetVector" access="In"/> 
<Parameter name="ARes" ftype="EventSet" access="Out"/> 
</Signature> 

<Signature name="Sigma = ^_i(Sigma(Gen_i))"> 
<Parameter name="GVec" ftype="GeneratorVector" access="In"/> 
<Parameter name="ARes" ftype="EventSet" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetLanguage" ctype="faudes::AlphabetLanguage"> 

<Documentation ref="corefaudes_regular.html#AlphabetLanguage"> 
Generator with Lm(G)=Sigma.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      full          
regular       
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(GRes) = Sigma"> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetUnion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetUnion" ctype="faudes::SetUnion"> 

<Documentation ref="corefaudes_alphabet.html#AlphabetUnion"> 
Union over Alphabets
</Documentation> 
<Keywords> 
CoreFaudes    EventSet      functions     alphabet      union         
</Keywords> 

<VariantSignatures> 

<Signature name="Sigma=Sigma1 v Sigma2"> 
<Parameter name="Sigma1" ftype="EventSet" access="In"/> 
<Parameter name="Sigma2" ftype="EventSet" access="In"/> 
<Parameter name="Sigma" ftype="EventSet" access="Out"/> 
</Signature> 

<Signature name="Sigma = v_i(Sigma_i)"> 
<Parameter name="AVec" ftype="EventSetVector" access="In"/> 
<Parameter name="ARes" ftype="EventSet" access="Out"/> 
</Signature> 

<Signature name="Sigma = v_i(Sigma(Gen_i))"> 
<Parameter name="GVec" ftype="GeneratorVector" access="In"/> 
<Parameter name="ARes" ftype="EventSet" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Automaton -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Automaton" ctype="faudes::Automaton"> 

<Documentation ref="corefaudes_genmisc.html#Automaton"> 
Convert generator to formal automaton.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  generator     automaton     
</Keywords> 

<VariantSignatures> 

<Signature name="Automaton(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="InOut"/> 
</Signature> 

<Signature name="Automaton(GArg, Sigma)"> 
<Parameter name="GArg" ftype="Generator" access="InOut"/> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Coaccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Coaccessible" ctype="faudes::Coaccessible"> 

<Documentation ref="corefaudes_reachability.html#Coaccessible"> 
Delete non-coaccessible states and transitions.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     accessible    reachable     
</Keywords> 

<VariantSignatures> 

<Signature name="G:=CoAcc(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 

<Signature name="GRes:=CoAcc(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Complete -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Complete" ctype="faudes::Complete"> 

<Documentation ref="corefaudes_reachability.html#Complete"> 
Delete states that evolve into a terminal state.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     accessible    reachable     
</Keywords> 

<VariantSignatures> 

<Signature name="G:=Complete(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 

<Signature name="GRes:=Complete(G)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

<Signature name="G:=Complete(G,SigmaO)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
<Parameter name="SigmaO" ftype="EventSet" access="In"/> 
</Signature> 

<Signature name="GRes:=Complete(G,SigmaO)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="SigmaO" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Deterministic -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Deterministic" ctype="faudes::aDeterministic"> 

<Documentation ref="corefaudes_statemin.html#Deterministic"> 
Powerset construction to enforce determinism.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "state set conversion"  deterministic  determinism   
</Keywords> 

<VariantSignatures> 
<Signature name="Deterministic(G,GRes)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function UniqueInit -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::UniqueInit" ctype="faudes::UniqueInit"> 

<Documentation ref="corefaudes_statemin.html#UniqueInit"> 
Enforce unique initial state.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "state set conversion"  deterministic  determinism  "unique initialstate" 
</Keywords> 

<VariantSignatures> 
<Signature name="UniqueInit(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 
<Signature name="UniqueInit(G,GRes)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function EmptyLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::EmptyLanguage" ctype="faudes::EmptyLanguage"> 

<Documentation ref="corefaudes_genmisc.html#EmptyLanguage"> 
Set generator to mark empty language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      regular       
empty         
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(GRes) := 0"> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function EmptyStringLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::EmptyStringLanguage" ctype="faudes::EmptyStringLanguage"> 

<Documentation ref="corefaudes_regular.html#EmptyStringLanguage"> 
Generator with Lm(G)={epsilon}.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      regular       
empty         
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(GRes) = {epsilon}"> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function FullLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::FullLanguage" ctype="faudes::FullLanguage"> 

<Documentation ref="corefaudes_regular.html#FullLanguage"> 
Generator with Lm(G)=Sigma*.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      full          
regular       
</Keywords> 

<VariantSignatures> 
<Signature name="L(GRes) = Sigma*"> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IntegerSum -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IntegerSum" ctype="faudes::IntegerSum"> 

<Documentation ref="corefaudes_elementary.html#IntegerSum"> 
Sum of integer arguments.
</Documentation> 
<Keywords> 
CoreFaudes    integer       "elemetary types"  
</Keywords> 

<VariantSignatures> 

<Signature name="IRes=I_1+I_2"> 
<Parameter name="I_1" ftype="Integer" access="In"/> 
<Parameter name="I_2" ftype="Integer" access="In"/> 
<Parameter name="IRes" ftype="Integer" access="Out" creturn="true"/> 
</Signature> 

<Signature name="IRes=Sum_i I_i"> 
<Parameter name="IVec" ftype="IntegerVector" access="In"/> 
<Parameter name="IRes" ftype="Integer" access="Out" creturn="true"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function InvProject -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::InvProject" ctype="faudes::aInvProject"> 

<Documentation ref="corefaudes_projection.html#InvProject"> 
Inverse projection of marked and generated language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  "language projection"  
</Keywords> 

<VariantSignatures> 

<Signature name="InvProject(G0,Sigma)"> 
<Parameter name="G0" ftype="Generator" access="InOut"/> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
</Signature> 

<Signature name="InvProject(G0,Sigma,GRes)"> 
<Parameter name="G0" ftype="Generator" access="In"/> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsAccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsAccessible" ctype="faudes::IsAccessible"> 

<Documentation ref="corefaudes_reachability.html#IsAccessible"> 
Tests a generator for accessibility.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     accessible    reachable     
</Keywords> 

<VariantSignatures> 
<Signature name="Default"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsCoaccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsCoaccessible" ctype="faudes::IsCoaccessible"> 

<Documentation ref="corefaudes_reachability.html#IsCoaccessible"> 
Tests a generator for coaccessibility.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     coaccessible  reachable     
</Keywords> 

<VariantSignatures> 
<Signature name="Default"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsComplete -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsComplete" ctype="faudes::IsComplete"> 

<Documentation ref="corefaudes_reachability.html#IsComplete"> 
Test completeness of a generator.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     complete      reachable     
</Keywords> 

<VariantSignatures> 

<Signature name="IsComplete(G)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 

<Signature name="IsComplete(G,SigmaO)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="SigmaO" ftype="EventSet" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsDeterministic -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsDeterministic" ctype="faudes::IsDeterministic"> 

<Documentation ref="corefaudes_statemin.html#IsDeterministic"> 
Test for determinsim.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "state set conversion"  deterministic  determinism   
</Keywords> 

<VariantSignatures> 
<Signature name="IsDeterministic(G)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsEmptyLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsEmptyLanguage" ctype="faudes::IsEmptyLanguage"> 

<Documentation ref="corefaudes_genmisc.html#IsEmptyLanguage"> 
Test Generator G for empty marked language Lm(G).
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      regular       
empty         
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(GArg) == 0"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsNonblocking -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsNonblocking" ctype="faudes::IsNonblocking"> 

<Documentation ref="corefaudes_parallel.html#IsNonblocking"> 
Test a generator/ two languages for being nonblocking.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     composition   generator     nonblocking   
</Keywords> 

<VariantSignatures> 

<Signature name="IsNonblocking(G)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 

<Signature name="IsNonblocking(G1,G2)"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 

<Signature name="IsNonblocking(G1,G2 ... Gn)"> 
<Parameter name="G" ftype="GeneratorVector" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsOmegaClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsOmegaClosed" ctype="faudes::IsOmegaClosed"> 

<Documentation ref="corefaudes_genmisc.html#IsOmegaClosed"> 
Tests a language for being omega-closed.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  "omega closed"  closed        
</Keywords> 

<VariantSignatures> 
<Signature name="IsOmegaClosed(G)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsOmegaTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsOmegaTrim" ctype="faudes::IsOmegaTrim"> 

<Documentation ref="corefaudes_reachability.html#IsOmegaTrim"> 
Tests a generator for omega trimness.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     trim          reachable     
"omega languages"  
</Keywords> 

<VariantSignatures> 
<Signature name="Default"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsPrefixClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsPrefixClosed" ctype="faudes::IsPrefixClosed"> 

<Documentation ref="corefaudes_genmisc.html#IsPrefixClosed"> 
Tests a language for being prefix-closed.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  "prefix closed"  closed        
</Keywords> 

<VariantSignatures> 
<Signature name="IsPrefixClosed(G)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsTrim" ctype="faudes::IsTrim"> 

<Documentation ref="corefaudes_reachability.html#IsTrim"> 
Tests a generator for trimness.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     trim          reachable     
</Keywords> 

<VariantSignatures> 
<Signature name="Default"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function KleeneClosure -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::KleeneClosure" ctype="faudes::KleeneClosure"> 

<Documentation ref="corefaudes_regular.html#KleeneClosure"> 
Compute Kleene closure for given language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      kleene        
closure       
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(G) := Lm(G)*"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 
<Signature name="Lm(GRes) := Lm(GArg)*"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageComplement -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageComplement" ctype="faudes::LanguageComplement"> 

<Documentation ref="corefaudes_langboolean.html#LanguageComplement"> 
Computes the complement of a language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      complement    
</Keywords> 

<VariantSignatures> 

<Signature name="Lm(GPar) := -Lm(GPar)"> 
<Parameter name="GPar" ftype="Generator" access="InOut"/> 
</Signature> 

<Signature name="Lm(GRes) = -Lm(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

<Signature name="Lm(GRes) = Sigma^* - Lm(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageConcatenate -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageConcatenate" ctype="faudes::LanguageConcatenate"> 

<Documentation ref="corefaudes_regular.html#LanguageConcatenate"> 
Concatenates two languages.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      concatenate   
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(GRes) = Lm(G1) Lm(G2)"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageDifference -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageDifference" ctype="faudes::LanguageDifference"> 

<Documentation ref="corefaudes_langboolean.html#LanguageDifference"> 
Computes the difference of two languages.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      difference    
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(GRes) = Lm(G1) - Lm(G2)"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageDisjoint -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageDisjoint" ctype="faudes::LanguageDisjoint"> 

<Documentation ref="corefaudes_langboolean.html#LanguageDisjoint"> 
Tests whether two languages are disjoint.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      disjoint      
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(G1) ^ Lm(G2) == 0"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageEquality -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageEquality" ctype="faudes::LanguageEquality"> 

<Documentation ref="corefaudes_langboolean.html#LanguageEquality"> 
Tests whether two languages are equal.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      equal         
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(G1) == Lm(G2)"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageInclusion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageInclusion" ctype="faudes::LanguageInclusion"> 

<Documentation ref="corefaudes_langboolean.html#LanguageInclusion"> 
Tests whether a languages includes another language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      inclusion     
</Keywords> 

<VariantSignatures> 
<Signature name="Lm(G1) &lt;= Lm(G2)"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageIntersection -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageIntersection" ctype="faudes::LanguageIntersection"> 

<Documentation ref="corefaudes_langboolean.html#LanguageIntersection"> 
Computes the intersection of languages.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  generator     language      intersection  
</Keywords> 

<VariantSignatures> 

<Signature name="Lm(GRes) = Lm(G1) v Lm(G2)"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

<Signature name="Lm(GRes) = ^_i(G_i)"> 
<Parameter name="GVec" ftype="GeneratorVector" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageUnion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageUnion" ctype="faudes::LanguageUnion"> 

<Documentation ref="corefaudes_langboolean.html#LanguageUnion"> 
Computes the union of languages.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "regular expressions"  language      union         
</Keywords> 

<VariantSignatures> 

<Signature name="Lm(GRes) = Lm(G1) v Lm(G2)"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

<Signature name="Lm(GRes) = v_i(G_i)"> 
<Parameter name="GVec" ftype="GeneratorVector" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MarkAllStates -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::MarkAllStates" ctype="faudes::MarkAllStates"> 

<Documentation> 
Mark all states in generator.
</Documentation> 

<VariantSignatures> 
<Signature name="Mark(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaClosure -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaClosure" ctype="faudes::OmegaClosure"> 

<Documentation ref="corefaudes_genmisc.html#OmegaClosure"> 
Compute omega closure for given language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      omega         
closure       
</Keywords> 

<VariantSignatures> 
<Signature name="OmegaClosure(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="InOut"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaParallel -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaParallel" ctype="faudes::aOmegaParallel"> 

<Documentation ref="corefaudes_parallel.html#OmegaParallel"> 
Parallel composition with relaxed acceptance condition.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "parallel composition"  "synchronous product"  
</Keywords> 

<VariantSignatures> 
<Signature name="GRes = G1 || G2"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaProduct -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaProduct" ctype="faudes::aOmegaProduct"> 

<Documentation ref="corefaudes_parallel.html#OmegaProduct"> 
Product composition for Buechi acceptance condition.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "parallel composition"  "synchronous product"  
</Keywords> 

<VariantSignatures> 
<Signature name="GRes = G1 xx G2"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaTrim" ctype="faudes::OmegaTrim"> 

<Documentation ref="corefaudes_reachability.html#OmegaTrim"> 
Delete states to achieve omega-trimness.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     trim          reachable     
"omega languages"  
</Keywords> 

<VariantSignatures> 

<Signature name="G:=OmegaTrim(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 

<Signature name="GRes=OmegaTrim(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Parallel -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Parallel" ctype="faudes::aParallel"> 

<Documentation ref="corefaudes_parallel.html#Parallel"> 
Computes the parallel composition of two or more generators.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "parallel composition"  "synchronous product"  
</Keywords> 

<VariantSignatures> 

<Signature name="GRes = G1 || G2"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

<Signature name="GRes = || G_i"> 
<Parameter name="GVec" ftype="GeneratorVector" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

<Signature name="Parallel with ComMap"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="CompMap" ftype="ProductCompositionMap" access="Out"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function PrefixClosure -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::PrefixClosure" ctype="faudes::PrefixClosure"> 

<Documentation ref="corefaudes_genmisc.html#PrefixClosure"> 
Compute prefix closure for given language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      prefix        
closure       
</Keywords> 

<VariantSignatures> 
<Signature name="PrefixClosure(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="InOut"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Product -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Product" ctype="faudes::aProduct"> 

<Documentation ref="corefaudes_parallel.html#Product"> 
Computes the product composition of two genertors.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "product composition"  
</Keywords> 

<VariantSignatures> 
<Signature name="GRes = G1 x G2"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
<Signature name="Product with ComMap"> 
<Parameter name="G1" ftype="Generator" access="In"/> 
<Parameter name="G2" ftype="Generator" access="In"/> 
<Parameter name="CompMap" ftype="ProductCompositionMap" access="Out"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Project -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Project" ctype="faudes::aProject"> 

<Documentation ref="corefaudes_projection.html#Project"> 
Natural projection of marked and generated language.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  "natural projection"  
</Keywords> 

<VariantSignatures> 
<Signature name="Project(G,Sigmal0,Res)"> 
<Parameter name="G" ftype="Generator" access="In"/> 
<Parameter name="Sigma0" ftype="EventSet" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SelfLoop -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::SelfLoop" ctype="faudes::SelfLoop"> 

<Documentation ref="corefaudes_projection.html#SelfLoop"> 
Self loop with specified alphabet.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "language misc"  generator     language      
</Keywords> 

<VariantSignatures> 
<Signature name="SelfLoop(G,Sigma)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
<Parameter name="Sigma" ftype="EventSet" access="In"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function StateMin -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::StateMin" ctype="faudes::aStateMin"> 

<Documentation ref="corefaudes_statemin.html#StateMin"> 
Stateset minimization.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     "generator misc"  "state set conversion"  "state minimization"  
</Keywords> 

<VariantSignatures> 
<Signature name="GRes:=StateMin(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 
<Signature name="G:=StateMin(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 
</VariantSignatures> 

</FunctionDefinition> 


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Trim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Trim" ctype="faudes::Trim"> 

<Documentation ref="corefaudes_reachability.html#Trim"> 
Delete non-coaccessible and non-accessible states and transitions.
</Documentation> 
<Keywords> 
CoreFaudes    Functions     reachability  generator     trim          reachable     
</Keywords> 

<VariantSignatures> 

<Signature name="G:=Trim(G)"> 
<Parameter name="G" ftype="Generator" access="InOut"/> 
</Signature> 

<Signature name="GRes=Trim(GArg)"> 
<Parameter name="GArg" ftype="Generator" access="In"/> 
<Parameter name="GRes" ftype="Generator" access="Out"/> 
</Signature> 

</VariantSignatures> 

</FunctionDefinition> 


</Registry> 
